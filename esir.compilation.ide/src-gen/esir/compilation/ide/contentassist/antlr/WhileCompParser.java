/*
 * generated by Xtext 2.10.0
 */
package esir.compilation.ide.contentassist.antlr;

import com.google.inject.Inject;
import esir.compilation.ide.contentassist.antlr.internal.InternalWhileCompParser;
import esir.compilation.services.WhileCompGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class WhileCompParser extends AbstractContentAssistParser {

	@Inject
	private WhileCompGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalWhileCompParser createParser() {
		InternalWhileCompParser result = new InternalWhileCompParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getExprSimpleAccess().getAlternatives(), "rule__ExprSimple__Alternatives");
					put(grammarAccess.getExprSimpleAccess().getOpeAlternatives_9_2_0(), "rule__ExprSimple__OpeAlternatives_9_2_0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getReadAccess().getGroup(), "rule__Read__Group__0");
					put(grammarAccess.getReadAccess().getGroup_2(), "rule__Read__Group_2__0");
					put(grammarAccess.getWriteAccess().getGroup(), "rule__Write__Group__0");
					put(grammarAccess.getWriteAccess().getGroup_2(), "rule__Write__Group_2__0");
					put(grammarAccess.getAffectationAccess().getGroup(), "rule__Affectation__Group__0");
					put(grammarAccess.getAffectationAccess().getGroup_1(), "rule__Affectation__Group_1__0");
					put(grammarAccess.getAffectationAccess().getGroup_4(), "rule__Affectation__Group_4__0");
					put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
					put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
					put(grammarAccess.getForeachAccess().getGroup(), "rule__Foreach__Group__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getIfAccess().getGroup_4(), "rule__If__Group_4__0");
					put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_3(), "rule__ExprSimple__Group_3__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_4(), "rule__ExprSimple__Group_4__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_5(), "rule__ExprSimple__Group_5__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_6(), "rule__ExprSimple__Group_6__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_7(), "rule__ExprSimple__Group_7__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_8(), "rule__ExprSimple__Group_8__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_9(), "rule__ExprSimple__Group_9__0");
					put(grammarAccess.getLexprAccess().getGroup(), "rule__Lexpr__Group__0");
					put(grammarAccess.getProgramAccess().getFunctionsAssignment(), "rule__Program__FunctionsAssignment");
					put(grammarAccess.getFunctionAccess().getFunctionAssignment_1(), "rule__Function__FunctionAssignment_1");
					put(grammarAccess.getFunctionAccess().getDefinitionAssignment_3(), "rule__Function__DefinitionAssignment_3");
					put(grammarAccess.getDefinitionAccess().getReadAssignment_0(), "rule__Definition__ReadAssignment_0");
					put(grammarAccess.getDefinitionAccess().getCommandsAssignment_2(), "rule__Definition__CommandsAssignment_2");
					put(grammarAccess.getDefinitionAccess().getWriteAssignment_4(), "rule__Definition__WriteAssignment_4");
					put(grammarAccess.getReadAccess().getVariableAssignment_1(), "rule__Read__VariableAssignment_1");
					put(grammarAccess.getReadAccess().getVariableAssignment_2_1(), "rule__Read__VariableAssignment_2_1");
					put(grammarAccess.getWriteAccess().getVariableAssignment_1(), "rule__Write__VariableAssignment_1");
					put(grammarAccess.getWriteAccess().getVariableAssignment_2_1(), "rule__Write__VariableAssignment_2_1");
					put(grammarAccess.getAffectationAccess().getAffectationsAssignment_0(), "rule__Affectation__AffectationsAssignment_0");
					put(grammarAccess.getAffectationAccess().getAffectationsAssignment_1_1(), "rule__Affectation__AffectationsAssignment_1_1");
					put(grammarAccess.getAffectationAccess().getValeursAssignment_3(), "rule__Affectation__ValeursAssignment_3");
					put(grammarAccess.getAffectationAccess().getValeursAssignment_4_1(), "rule__Affectation__ValeursAssignment_4_1");
					put(grammarAccess.getNopAccess().getNopAssignment(), "rule__Nop__NopAssignment");
					put(grammarAccess.getCommandsAccess().getCommandAssignment_0(), "rule__Commands__CommandAssignment_0");
					put(grammarAccess.getCommandsAccess().getCommandsAssignment_1_1(), "rule__Commands__CommandsAssignment_1_1");
					put(grammarAccess.getCommandAccess().getCommandAssignment_0(), "rule__Command__CommandAssignment_0");
					put(grammarAccess.getCommandAccess().getCommandAssignment_1(), "rule__Command__CommandAssignment_1");
					put(grammarAccess.getCommandAccess().getCommandAssignment_2(), "rule__Command__CommandAssignment_2");
					put(grammarAccess.getCommandAccess().getCommandAssignment_3(), "rule__Command__CommandAssignment_3");
					put(grammarAccess.getCommandAccess().getCommandAssignment_4(), "rule__Command__CommandAssignment_4");
					put(grammarAccess.getCommandAccess().getCommandAssignment_5(), "rule__Command__CommandAssignment_5");
					put(grammarAccess.getForeachAccess().getExpr1Assignment_1(), "rule__Foreach__Expr1Assignment_1");
					put(grammarAccess.getForeachAccess().getExpr2Assignment_3(), "rule__Foreach__Expr2Assignment_3");
					put(grammarAccess.getForeachAccess().getCommandsAssignment_5(), "rule__Foreach__CommandsAssignment_5");
					put(grammarAccess.getIfAccess().getExprAssignment_1(), "rule__If__ExprAssignment_1");
					put(grammarAccess.getIfAccess().getCommands1Assignment_3(), "rule__If__Commands1Assignment_3");
					put(grammarAccess.getIfAccess().getCommands2Assignment_4_1(), "rule__If__Commands2Assignment_4_1");
					put(grammarAccess.getForAccess().getExprAssignment_1(), "rule__For__ExprAssignment_1");
					put(grammarAccess.getForAccess().getCommandsAssignment_3(), "rule__For__CommandsAssignment_3");
					put(grammarAccess.getWhileAccess().getExprAssignment_1(), "rule__While__ExprAssignment_1");
					put(grammarAccess.getWhileAccess().getCommandsAssignment_3(), "rule__While__CommandsAssignment_3");
					put(grammarAccess.getExprAccess().getExprsimpleAssignment(), "rule__Expr__ExprsimpleAssignment");
					put(grammarAccess.getExprSimpleAccess().getValeurAssignment_0(), "rule__ExprSimple__ValeurAssignment_0");
					put(grammarAccess.getExprSimpleAccess().getValeurAssignment_1(), "rule__ExprSimple__ValeurAssignment_1");
					put(grammarAccess.getExprSimpleAccess().getValeurAssignment_2(), "rule__ExprSimple__ValeurAssignment_2");
					put(grammarAccess.getExprSimpleAccess().getOpeAssignment_3_1(), "rule__ExprSimple__OpeAssignment_3_1");
					put(grammarAccess.getExprSimpleAccess().getLexprAssignment_3_2(), "rule__ExprSimple__LexprAssignment_3_2");
					put(grammarAccess.getExprSimpleAccess().getOpeAssignment_4_1(), "rule__ExprSimple__OpeAssignment_4_1");
					put(grammarAccess.getExprSimpleAccess().getLexprAssignment_4_2(), "rule__ExprSimple__LexprAssignment_4_2");
					put(grammarAccess.getExprSimpleAccess().getOpeAssignment_5_1(), "rule__ExprSimple__OpeAssignment_5_1");
					put(grammarAccess.getExprSimpleAccess().getExprAssignment_5_2(), "rule__ExprSimple__ExprAssignment_5_2");
					put(grammarAccess.getExprSimpleAccess().getOpeAssignment_6_1(), "rule__ExprSimple__OpeAssignment_6_1");
					put(grammarAccess.getExprSimpleAccess().getExprAssignment_6_2(), "rule__ExprSimple__ExprAssignment_6_2");
					put(grammarAccess.getExprSimpleAccess().getNAssignment_7_1(), "rule__ExprSimple__NAssignment_7_1");
					put(grammarAccess.getExprSimpleAccess().getExprAssignment_7_2(), "rule__ExprSimple__ExprAssignment_7_2");
					put(grammarAccess.getExprSimpleAccess().getCallAssignment_8_1(), "rule__ExprSimple__CallAssignment_8_1");
					put(grammarAccess.getExprSimpleAccess().getLexprAssignment_8_2(), "rule__ExprSimple__LexprAssignment_8_2");
					put(grammarAccess.getExprSimpleAccess().getEx1Assignment_9_1(), "rule__ExprSimple__Ex1Assignment_9_1");
					put(grammarAccess.getExprSimpleAccess().getOpeAssignment_9_2(), "rule__ExprSimple__OpeAssignment_9_2");
					put(grammarAccess.getExprSimpleAccess().getEx2Assignment_9_3(), "rule__ExprSimple__Ex2Assignment_9_3");
					put(grammarAccess.getLexprAccess().getExprAssignment_0(), "rule__Lexpr__ExprAssignment_0");
					put(grammarAccess.getLexprAccess().getLexprAssignment_1(), "rule__Lexpr__LexprAssignment_1");
					put(grammarAccess.getNotAccess().getNotAssignment(), "rule__Not__NotAssignment");
					put(grammarAccess.getConsAccess().getConsAssignment(), "rule__Cons__ConsAssignment");
					put(grammarAccess.getListAccess().getListAssignment(), "rule__List__ListAssignment");
					put(grammarAccess.getHdAccess().getHdAssignment(), "rule__Hd__HdAssignment");
					put(grammarAccess.getTlAccess().getTlAssignment(), "rule__Tl__TlAssignment");
					put(grammarAccess.getNil2Access().getNilAssignment(), "rule__Nil2__NilAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalWhileCompParser typedParser = (InternalWhileCompParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WhileCompGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WhileCompGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
