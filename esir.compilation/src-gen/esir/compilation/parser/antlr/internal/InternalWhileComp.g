/*
 * generated by Xtext 2.10.0
 */
grammar InternalWhileComp;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package esir.compilation.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package esir.compilation.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import esir.compilation.services.WhileCompGrammarAccess;

}

@parser::members {

 	private WhileCompGrammarAccess grammarAccess;

    public InternalWhileCompParser(TokenStream input, WhileCompGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected WhileCompGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_0());
			}
			lv_functions_0_0=ruleFunction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"functions",
					lv_functions_0_0,
					"esir.compilation.WhileComp.Function");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		(
			(
				lv_function_1_0=RULE_SYMBOL
				{
					newLeafNode(lv_function_1_0, grammarAccess.getFunctionAccess().getFunctionSYMBOLTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"function",
						lv_function_1_0,
						"esir.compilation.WhileComp.SYMBOL");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getDefinitionDefinitionParserRuleCall_3_0());
				}
				lv_definition_3_0=ruleDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"definition",
						lv_definition_3_0,
						"esir.compilation.WhileComp.Definition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current; }
	EOF;

// Rule Definition
ruleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getReadReadParserRuleCall_0_0());
				}
				lv_read_0_0=ruleRead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"read",
						lv_read_0_0,
						"esir.compilation.WhileComp.Read");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='%'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefinitionAccess().getPercentSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getCommandsCommandsParserRuleCall_2_0());
				}
				lv_commands_2_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"commands",
						lv_commands_2_0,
						"esir.compilation.WhileComp.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='%'
		{
			newLeafNode(otherlv_3, grammarAccess.getDefinitionAccess().getPercentSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getWriteWriteParserRuleCall_4_0());
				}
				lv_write_4_0=ruleWrite
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"write",
						lv_write_4_0,
						"esir.compilation.WhileComp.Write");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRead
entryRuleRead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadRule()); }
	iv_ruleRead=ruleRead
	{ $current=$iv_ruleRead.current; }
	EOF;

// Rule Read
ruleRead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read'
		{
			newLeafNode(otherlv_0, grammarAccess.getReadAccess().getReadKeyword_0());
		}
		(
			(
				lv_variable_1_0=RULE_VARIABLE
				{
					newLeafNode(lv_variable_1_0, grammarAccess.getReadAccess().getVariableVARIABLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReadRule());
					}
					addWithLastConsumed(
						$current,
						"variable",
						lv_variable_1_0,
						"esir.compilation.WhileComp.VARIABLE");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getReadAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_variable_3_0=RULE_VARIABLE
					{
						newLeafNode(lv_variable_3_0, grammarAccess.getReadAccess().getVariableVARIABLETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReadRule());
						}
						addWithLastConsumed(
							$current,
							"variable",
							lv_variable_3_0,
							"esir.compilation.WhileComp.VARIABLE");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleWrite
entryRuleWrite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWriteRule()); }
	iv_ruleWrite=ruleWrite
	{ $current=$iv_ruleWrite.current; }
	EOF;

// Rule Write
ruleWrite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='write'
		{
			newLeafNode(otherlv_0, grammarAccess.getWriteAccess().getWriteKeyword_0());
		}
		(
			(
				lv_variable_1_0=RULE_VARIABLE
				{
					newLeafNode(lv_variable_1_0, grammarAccess.getWriteAccess().getVariableVARIABLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWriteRule());
					}
					addWithLastConsumed(
						$current,
						"variable",
						lv_variable_1_0,
						"esir.compilation.WhileComp.VARIABLE");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getWriteAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_variable_3_0=RULE_VARIABLE
					{
						newLeafNode(lv_variable_3_0, grammarAccess.getWriteAccess().getVariableVARIABLETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWriteRule());
						}
						addWithLastConsumed(
							$current,
							"variable",
							lv_variable_3_0,
							"esir.compilation.WhileComp.VARIABLE");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAffectation
entryRuleAffectation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAffectationRule()); }
	iv_ruleAffectation=ruleAffectation
	{ $current=$iv_ruleAffectation.current; }
	EOF;

// Rule Affectation
ruleAffectation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_affectations_0_0=RULE_VARIABLE
				{
					newLeafNode(lv_affectations_0_0, grammarAccess.getAffectationAccess().getAffectationsVARIABLETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAffectationRule());
					}
					addWithLastConsumed(
						$current,
						"affectations",
						lv_affectations_0_0,
						"esir.compilation.WhileComp.VARIABLE");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getAffectationAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_affectations_2_0=RULE_VARIABLE
					{
						newLeafNode(lv_affectations_2_0, grammarAccess.getAffectationAccess().getAffectationsVARIABLETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAffectationRule());
						}
						addWithLastConsumed(
							$current,
							"affectations",
							lv_affectations_2_0,
							"esir.compilation.WhileComp.VARIABLE");
					}
				)
			)
		)*
		otherlv_3=':='
		{
			newLeafNode(otherlv_3, grammarAccess.getAffectationAccess().getColonEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAffectationAccess().getValeursExprParserRuleCall_3_0());
				}
				lv_valeurs_4_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAffectationRule());
					}
					add(
						$current,
						"valeurs",
						lv_valeurs_4_0,
						"esir.compilation.WhileComp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getAffectationAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAffectationAccess().getValeursExprParserRuleCall_4_1_0());
					}
					lv_valeurs_6_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAffectationRule());
						}
						add(
							$current,
							"valeurs",
							lv_valeurs_6_0,
							"esir.compilation.WhileComp.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNop
entryRuleNop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNopRule()); }
	iv_ruleNop=ruleNop
	{ $current=$iv_ruleNop.current; }
	EOF;

// Rule Nop
ruleNop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_nop_0_0='nop'
			{
				newLeafNode(lv_nop_0_0, grammarAccess.getNopAccess().getNopNopKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNopRule());
				}
				setWithLastConsumed($current, "nop", lv_nop_0_0, "nop");
			}
		)
	)
;

// Entry rule entryRuleCommands
entryRuleCommands returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandsRule()); }
	iv_ruleCommands=ruleCommands
	{ $current=$iv_ruleCommands.current; }
	EOF;

// Rule Commands
ruleCommands returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_0_0());
				}
				lv_command_0_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandsRule());
					}
					set(
						$current,
						"command",
						lv_command_0_0,
						"esir.compilation.WhileComp.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandsAccess().getCommandsCommandParserRuleCall_1_1_0());
					}
					lv_commands_2_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandsRule());
						}
						add(
							$current,
							"commands",
							lv_commands_2_0,
							"esir.compilation.WhileComp.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getCommandNopParserRuleCall_0_0());
				}
				lv_command_0_0=ruleNop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_0_0,
						"esir.compilation.WhileComp.Nop");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getCommandAffectationParserRuleCall_1_0());
				}
				lv_command_1_0=ruleAffectation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_1_0,
						"esir.compilation.WhileComp.Affectation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getCommandWhileParserRuleCall_2_0());
				}
				lv_command_2_0=ruleWhile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_2_0,
						"esir.compilation.WhileComp.While");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getCommandForParserRuleCall_3_0());
				}
				lv_command_3_0=ruleFor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_3_0,
						"esir.compilation.WhileComp.For");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getCommandIfParserRuleCall_4_0());
				}
				lv_command_4_0=ruleIf
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_4_0,
						"esir.compilation.WhileComp.If");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getCommandForeachParserRuleCall_5_0());
				}
				lv_command_5_0=ruleForeach
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_5_0,
						"esir.compilation.WhileComp.Foreach");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForeach
entryRuleForeach returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForeachRule()); }
	iv_ruleForeach=ruleForeach
	{ $current=$iv_ruleForeach.current; }
	EOF;

// Rule Foreach
ruleForeach returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='foreach'
		{
			newLeafNode(otherlv_0, grammarAccess.getForeachAccess().getForeachKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForeachAccess().getExpr1ExprParserRuleCall_1_0());
				}
				lv_expr1_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForeachRule());
					}
					set(
						$current,
						"expr1",
						lv_expr1_1_0,
						"esir.compilation.WhileComp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getForeachAccess().getInKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForeachAccess().getExpr2ExprParserRuleCall_3_0());
				}
				lv_expr2_3_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForeachRule());
					}
					set(
						$current,
						"expr2",
						lv_expr2_3_0,
						"esir.compilation.WhileComp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getForeachAccess().getDoKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForeachAccess().getCommandsCommandsParserRuleCall_5_0());
				}
				lv_commands_5_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForeachRule());
					}
					set(
						$current,
						"commands",
						lv_commands_5_0,
						"esir.compilation.WhileComp.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='od'
		{
			newLeafNode(otherlv_6, grammarAccess.getForeachAccess().getOdKeyword_6());
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getExprExprParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"esir.compilation.WhileComp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getCommands1CommandsParserRuleCall_3_0());
				}
				lv_commands1_3_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"commands1",
						lv_commands1_3_0,
						"esir.compilation.WhileComp.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_4='else'
				{
					newLeafNode(otherlv_4, grammarAccess.getIfAccess().getElseKeyword_4_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfAccess().getCommands2CommandsParserRuleCall_4_1_0());
					}
					lv_commands2_5_0=ruleCommands
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfRule());
						}
						set(
							$current,
							"commands2",
							lv_commands2_5_0,
							"esir.compilation.WhileComp.Commands");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='fi'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfAccess().getFiKeyword_5());
		}
	)
;

// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRule()); }
	iv_ruleFor=ruleFor
	{ $current=$iv_ruleFor.current; }
	EOF;

// Rule For
ruleFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getExprExprParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"esir.compilation.WhileComp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getForAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getCommandsCommandsParserRuleCall_3_0());
				}
				lv_commands_3_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"commands",
						lv_commands_3_0,
						"esir.compilation.WhileComp.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='od'
		{
			newLeafNode(otherlv_4, grammarAccess.getForAccess().getOdKeyword_4());
		}
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getExprExprParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"esir.compilation.WhileComp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getCommandsCommandsParserRuleCall_3_0());
				}
				lv_commands_3_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"commands",
						lv_commands_3_0,
						"esir.compilation.WhileComp.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='od'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileAccess().getOdKeyword_4());
		}
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExprAccess().getExprAndExprAndParserRuleCall_0());
			}
			lv_exprAnd_0_0=ruleExprAnd
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExprRule());
				}
				set(
					$current,
					"exprAnd",
					lv_exprAnd_0_0,
					"esir.compilation.WhileComp.ExprAnd");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExprAnd
entryRuleExprAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprAndRule()); }
	iv_ruleExprAnd=ruleExprAnd
	{ $current=$iv_ruleExprAnd.current; }
	EOF;

// Rule ExprAnd
ruleExprAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprAndAccess().getExprOrExprOrParserRuleCall_0_0());
				}
				lv_exprOr_0_0=ruleExprOr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprAndRule());
					}
					set(
						$current,
						"exprOr",
						lv_exprOr_0_0,
						"esir.compilation.WhileComp.ExprOr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getExprAndAccess().getAndKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprAndAccess().getExprAndExprAndParserRuleCall_1_1_0());
					}
					lv_exprAnd_2_0=ruleExprAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprAndRule());
						}
						set(
							$current,
							"exprAnd",
							lv_exprAnd_2_0,
							"esir.compilation.WhileComp.ExprAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExprOr
entryRuleExprOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprOrRule()); }
	iv_ruleExprOr=ruleExprOr
	{ $current=$iv_ruleExprOr.current; }
	EOF;

// Rule ExprOr
ruleExprOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprOrAccess().getExprNotExprNotParserRuleCall_0_0());
				}
				lv_exprNot_0_0=ruleExprNot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprOrRule());
					}
					set(
						$current,
						"exprNot",
						lv_exprNot_0_0,
						"esir.compilation.WhileComp.ExprNot");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='or'
			{
				newLeafNode(otherlv_1, grammarAccess.getExprOrAccess().getOrKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprOrAccess().getExprOrExprOrParserRuleCall_1_1_0());
					}
					lv_exprOr_2_0=ruleExprOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprOrRule());
						}
						set(
							$current,
							"exprOr",
							lv_exprOr_2_0,
							"esir.compilation.WhileComp.ExprOr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExprNot
entryRuleExprNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprNotRule()); }
	iv_ruleExprNot=ruleExprNot
	{ $current=$iv_ruleExprNot.current; }
	EOF;

// Rule ExprNot
ruleExprNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprNotAccess().getNotNotParserRuleCall_0_0());
				}
				lv_not_0_0=ruleNot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprNotRule());
					}
					set(
						$current,
						"not",
						lv_not_0_0,
						"esir.compilation.WhileComp.Not");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExprNotAccess().getExprEqExprEqParserRuleCall_1_0());
				}
				lv_exprEq_1_0=ruleExprEq
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprNotRule());
					}
					set(
						$current,
						"exprEq",
						lv_exprEq_1_0,
						"esir.compilation.WhileComp.ExprEq");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExprEq
entryRuleExprEq returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprEqRule()); }
	iv_ruleExprEq=ruleExprEq
	{ $current=$iv_ruleExprEq.current; }
	EOF;

// Rule ExprEq
ruleExprEq returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprEqAccess().getExprSimple1ExprSimpleParserRuleCall_0_0());
				}
				lv_exprSimple1_0_0=ruleExprSimple
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprEqRule());
					}
					set(
						$current,
						"exprSimple1",
						lv_exprSimple1_0_0,
						"esir.compilation.WhileComp.ExprSimple");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='=?'
			{
				newLeafNode(otherlv_1, grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprEqAccess().getExprSimple2ExprSimpleParserRuleCall_1_1_0());
					}
					lv_exprSimple2_2_0=ruleExprSimple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprEqRule());
						}
						set(
							$current,
							"exprSimple2",
							lv_exprSimple2_2_0,
							"esir.compilation.WhileComp.ExprSimple");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVars
entryRuleVars returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	iv_ruleVars=ruleVars
	{ $current=$iv_ruleVars.current; }
	EOF;

// Rule Vars
ruleVars returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_variable_0_0=RULE_VARIABLE
					{
						newLeafNode(lv_variable_0_0, grammarAccess.getVarsAccess().getVariableVARIABLETerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarsRule());
						}
						setWithLastConsumed(
							$current,
							"variable",
							lv_variable_0_0,
							"esir.compilation.WhileComp.VARIABLE");
					}
				)
			)
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVarsAccess().getCommaKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarsAccess().getVarsVarsParserRuleCall_0_2_0());
					}
					lv_vars_2_0=ruleVars
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarsRule());
						}
						set(
							$current,
							"vars",
							lv_vars_2_0,
							"esir.compilation.WhileComp.Vars");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				lv_variable_3_0=RULE_VARIABLE
				{
					newLeafNode(lv_variable_3_0, grammarAccess.getVarsAccess().getVariableVARIABLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarsRule());
					}
					setWithLastConsumed(
						$current,
						"variable",
						lv_variable_3_0,
						"esir.compilation.WhileComp.VARIABLE");
				}
			)
		)
	)
;

// Entry rule entryRuleExprs
entryRuleExprs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprsRule()); }
	iv_ruleExprs=ruleExprs
	{ $current=$iv_ruleExprs.current; }
	EOF;

// Rule Exprs
ruleExprs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				(
					(
						ruleExpr
					)
				)
				','
				(
					(
						ruleExprs
					)
				)
			)
			)=>
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getExprsAccess().getExprExprParserRuleCall_0_0_0_0());
						}
						lv_expr_0_0=ruleExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExprsRule());
							}
							set(
								$current,
								"expr",
								lv_expr_0_0,
								"esir.compilation.WhileComp.Expr");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_1=','
				{
					newLeafNode(otherlv_1, grammarAccess.getExprsAccess().getCommaKeyword_0_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExprsAccess().getExprsExprsParserRuleCall_0_0_2_0());
						}
						lv_exprs_2_0=ruleExprs
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExprsRule());
							}
							set(
								$current,
								"exprs",
								lv_exprs_2_0,
								"esir.compilation.WhileComp.Exprs");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprsAccess().getExprExprParserRuleCall_1_0());
				}
				lv_expr_3_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprsRule());
					}
					set(
						$current,
						"expr",
						lv_expr_3_0,
						"esir.compilation.WhileComp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExprSimple
entryRuleExprSimple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSimpleRule()); }
	iv_ruleExprSimple=ruleExprSimple
	{ $current=$iv_ruleExprSimple.current; }
	EOF;

// Rule ExprSimple
ruleExprSimple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_valeur_0_0='nil'
				{
					newLeafNode(lv_valeur_0_0, grammarAccess.getExprSimpleAccess().getValeurNilKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprSimpleRule());
					}
					setWithLastConsumed($current, "valeur", lv_valeur_0_0, "nil");
				}
			)
		)
		    |
		(
			(
				lv_valeur_1_0=RULE_VARIABLE
				{
					newLeafNode(lv_valeur_1_0, grammarAccess.getExprSimpleAccess().getValeurVARIABLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprSimpleRule());
					}
					setWithLastConsumed(
						$current,
						"valeur",
						lv_valeur_1_0,
						"esir.compilation.WhileComp.VARIABLE");
				}
			)
		)
		    |
		(
			(
				lv_valeur_2_0=RULE_SYMBOL
				{
					newLeafNode(lv_valeur_2_0, grammarAccess.getExprSimpleAccess().getValeurSYMBOLTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprSimpleRule());
					}
					setWithLastConsumed(
						$current,
						"valeur",
						lv_valeur_2_0,
						"esir.compilation.WhileComp.SYMBOL");
				}
			)
		)
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					lv_ope_4_0='cons'
					{
						newLeafNode(lv_ope_4_0, grammarAccess.getExprSimpleAccess().getOpeConsKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleRule());
						}
						setWithLastConsumed($current, "ope", lv_ope_4_0, "cons");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExprSimpleAccess().getLexprLexprParserRuleCall_3_2_0());
					}
					lv_lexpr_5_0=ruleLexpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
						}
						set(
							$current,
							"lexpr",
							lv_lexpr_5_0,
							"esir.compilation.WhileComp.Lexpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3());
			}
		)
		    |
		(
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					lv_ope_8_0='list'
					{
						newLeafNode(lv_ope_8_0, grammarAccess.getExprSimpleAccess().getOpeListKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleRule());
						}
						setWithLastConsumed($current, "ope", lv_ope_8_0, "list");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExprSimpleAccess().getLexprLexprParserRuleCall_4_2_0());
					}
					lv_lexpr_9_0=ruleLexpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
						}
						set(
							$current,
							"lexpr",
							lv_lexpr_9_0,
							"esir.compilation.WhileComp.Lexpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_3());
			}
		)
		    |
		(
			otherlv_11='('
			{
				newLeafNode(otherlv_11, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0());
			}
			(
				(
					lv_ope_12_0='hd'
					{
						newLeafNode(lv_ope_12_0, grammarAccess.getExprSimpleAccess().getOpeHdKeyword_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleRule());
						}
						setWithLastConsumed($current, "ope", lv_ope_12_0, "hd");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExprSimpleAccess().getExprExprParserRuleCall_5_2_0());
					}
					lv_expr_13_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
						}
						set(
							$current,
							"expr",
							lv_expr_13_0,
							"esir.compilation.WhileComp.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_3());
			}
		)
		    |
		(
			otherlv_15='('
			{
				newLeafNode(otherlv_15, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_6_0());
			}
			(
				(
					lv_ope_16_0='tl'
					{
						newLeafNode(lv_ope_16_0, grammarAccess.getExprSimpleAccess().getOpeTlKeyword_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleRule());
						}
						setWithLastConsumed($current, "ope", lv_ope_16_0, "tl");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExprSimpleAccess().getExprExprParserRuleCall_6_2_0());
					}
					lv_expr_17_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
						}
						set(
							$current,
							"expr",
							lv_expr_17_0,
							"esir.compilation.WhileComp.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18=')'
			{
				newLeafNode(otherlv_18, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_6_3());
			}
		)
		    |
		(
			otherlv_19='('
			{
				newLeafNode(otherlv_19, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_7_0());
			}
			(
				(
					lv_valeur_20_0=RULE_SYMBOL
					{
						newLeafNode(lv_valeur_20_0, grammarAccess.getExprSimpleAccess().getValeurSYMBOLTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleRule());
						}
						setWithLastConsumed(
							$current,
							"valeur",
							lv_valeur_20_0,
							"esir.compilation.WhileComp.SYMBOL");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExprSimpleAccess().getLexprLexprParserRuleCall_7_2_0());
					}
					lv_lexpr_21_0=ruleLexpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
						}
						set(
							$current,
							"lexpr",
							lv_lexpr_21_0,
							"esir.compilation.WhileComp.Lexpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_22=')'
			{
				newLeafNode(otherlv_22, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_7_3());
			}
		)
	)
;

// Entry rule entryRuleLexpr
entryRuleLexpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLexprRule()); }
	iv_ruleLexpr=ruleLexpr
	{ $current=$iv_ruleLexpr.current; }
	EOF;

// Rule Lexpr
ruleLexpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLexprAccess().getExprExprParserRuleCall_0_0());
				}
				lv_expr_0_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLexprRule());
					}
					set(
						$current,
						"expr",
						lv_expr_0_0,
						"esir.compilation.WhileComp.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLexprAccess().getLexprLexprParserRuleCall_1_0());
				}
				lv_lexpr_1_0=ruleLexpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLexprRule());
					}
					set(
						$current,
						"lexpr",
						lv_lexpr_1_0,
						"esir.compilation.WhileComp.Lexpr");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_not_0_0='!'
			{
				newLeafNode(lv_not_0_0, grammarAccess.getNotAccess().getNotExclamationMarkKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNotRule());
				}
				setWithLastConsumed($current, "not", lv_not_0_0, "!");
			}
		)
	)
;

RULE_VARIABLE : 'A'..'Z' ('A'..'Z'|'a'..'z')*;

RULE_SYMBOL : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9')* ((('-'|'+'|'.'|'/'|'_'|'&')|'->') ('A'..'Z'|'a'..'z'|'0'..'9')+)* ('!'|'?')?;

RULE_NOMBRE : '1'..'9' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
