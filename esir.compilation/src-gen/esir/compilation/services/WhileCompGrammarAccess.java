/*
 * generated by Xtext 2.10.0
 */
package esir.compilation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhileCompGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Program");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		/// * HEAD * / Program:
		//	functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionSYMBOLTerminalRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//Function:
		//	'function' function=SYMBOL ':' definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' function=SYMBOL ':' definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//function=SYMBOL
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//SYMBOL
		public RuleCall getFunctionSYMBOLTerminalRuleCall_1_0() { return cFunctionSYMBOLTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReadReadParserRuleCall_0_0 = (RuleCall)cReadAssignment_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandsParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWriteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWriteWriteParserRuleCall_4_0 = (RuleCall)cWriteAssignment_4.eContents().get(0);
		
		//Definition:
		//	read=Read
		//	'%'
		//	commands=Commands
		//	'%'
		//	write=Write;
		@Override public ParserRule getRule() { return rule; }
		
		//read=Read '%' commands=Commands '%' write=Write
		public Group getGroup() { return cGroup; }
		
		//read=Read
		public Assignment getReadAssignment_0() { return cReadAssignment_0; }
		
		//Read
		public RuleCall getReadReadParserRuleCall_0_0() { return cReadReadParserRuleCall_0_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_2_0() { return cCommandsCommandsParserRuleCall_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
		
		//write=Write
		public Assignment getWriteAssignment_4() { return cWriteAssignment_4; }
		
		//Write
		public RuleCall getWriteWriteParserRuleCall_4_0() { return cWriteWriteParserRuleCall_4_0; }
	}
	public class ReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Read");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		
		/// * Input & Output * / Read:
		//	'read' variable+=VARIABLE (',' variable+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' variable+=VARIABLE (',' variable+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//variable+=VARIABLE
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_1_0() { return cVariableVARIABLETerminalRuleCall_1_0; }
		
		//(',' variable+=VARIABLE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variable+=VARIABLE
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_2_1_0() { return cVariableVARIABLETerminalRuleCall_2_1_0; }
	}
	public class WriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Write");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWriteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		
		//Write:
		//	'write' variable+=VARIABLE (',' variable+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'write' variable+=VARIABLE (',' variable+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//'write'
		public Keyword getWriteKeyword_0() { return cWriteKeyword_0; }
		
		//variable+=VARIABLE
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_1_0() { return cVariableVARIABLETerminalRuleCall_1_0; }
		
		//(',' variable+=VARIABLE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variable+=VARIABLE
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_2_1_0() { return cVariableVARIABLETerminalRuleCall_2_1_0; }
	}
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAffectationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAffectationsVARIABLETerminalRuleCall_0_0 = (RuleCall)cAffectationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAffectationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAffectationsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cAffectationsAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValeursAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValeursExprParserRuleCall_3_0 = (RuleCall)cValeursAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValeursAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValeursExprParserRuleCall_4_1_0 = (RuleCall)cValeursAssignment_4_1.eContents().get(0);
		
		/// * Commandes * / Affectation:
		//	affectations+=VARIABLE (',' affectations+=VARIABLE)* ':=' valeurs+=Expr (',' valeurs+=Expr)*
		//	/ * TODO Ajouter ExprSimple * /;
		@Override public ParserRule getRule() { return rule; }
		
		//affectations+=VARIABLE (',' affectations+=VARIABLE)* ':=' valeurs+=Expr (',' valeurs+=Expr)*
		public Group getGroup() { return cGroup; }
		
		//affectations+=VARIABLE
		public Assignment getAffectationsAssignment_0() { return cAffectationsAssignment_0; }
		
		//VARIABLE
		public RuleCall getAffectationsVARIABLETerminalRuleCall_0_0() { return cAffectationsVARIABLETerminalRuleCall_0_0; }
		
		//(',' affectations+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//affectations+=VARIABLE
		public Assignment getAffectationsAssignment_1_1() { return cAffectationsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getAffectationsVARIABLETerminalRuleCall_1_1_0() { return cAffectationsVARIABLETerminalRuleCall_1_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//valeurs+=Expr
		public Assignment getValeursAssignment_3() { return cValeursAssignment_3; }
		
		//Expr
		public RuleCall getValeursExprParserRuleCall_3_0() { return cValeursExprParserRuleCall_3_0; }
		
		//(',' valeurs+=Expr)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//valeurs+=Expr
		public Assignment getValeursAssignment_4_1() { return cValeursAssignment_4_1; }
		
		//Expr
		public RuleCall getValeursExprParserRuleCall_4_1_0() { return cValeursExprParserRuleCall_4_1_0; }
	}
	public class NopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Nop");
		private final Assignment cNopAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNopNopKeyword_0 = (Keyword)cNopAssignment.eContents().get(0);
		
		//Nop:
		//	nop='nop';
		@Override public ParserRule getRule() { return rule; }
		
		//nop='nop'
		public Assignment getNopAssignment() { return cNopAssignment; }
		
		//'nop'
		public Keyword getNopNopKeyword_0() { return cNopNopKeyword_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandCommandParserRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		
		//Commands:
		//	command=Command (';' commands+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//command=Command (';' commands+=Command)*
		public Group getGroup() { return cGroup; }
		
		//command=Command
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_0_0() { return cCommandCommandParserRuleCall_0_0; }
		
		//(';' commands+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_1_0() { return cCommandsCommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCommandNopParserRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCommandAffectationParserRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		private final Assignment cCommandAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCommandWhileParserRuleCall_2_0 = (RuleCall)cCommandAssignment_2.eContents().get(0);
		private final Assignment cCommandAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCommandForParserRuleCall_3_0 = (RuleCall)cCommandAssignment_3.eContents().get(0);
		private final Assignment cCommandAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCommandIfParserRuleCall_4_0 = (RuleCall)cCommandAssignment_4.eContents().get(0);
		private final Assignment cCommandAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCommandForeachParserRuleCall_5_0 = (RuleCall)cCommandAssignment_5.eContents().get(0);
		
		//Command:
		//	command=Nop | command=Affectation | command=While | command=For | command=If | command=Foreach;
		@Override public ParserRule getRule() { return rule; }
		
		//command=Nop | command=Affectation | command=While | command=For | command=If | command=Foreach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//command=Nop
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//Nop
		public RuleCall getCommandNopParserRuleCall_0_0() { return cCommandNopParserRuleCall_0_0; }
		
		//command=Affectation
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }
		
		//Affectation
		public RuleCall getCommandAffectationParserRuleCall_1_0() { return cCommandAffectationParserRuleCall_1_0; }
		
		//command=While
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }
		
		//While
		public RuleCall getCommandWhileParserRuleCall_2_0() { return cCommandWhileParserRuleCall_2_0; }
		
		//command=For
		public Assignment getCommandAssignment_3() { return cCommandAssignment_3; }
		
		//For
		public RuleCall getCommandForParserRuleCall_3_0() { return cCommandForParserRuleCall_3_0; }
		
		//command=If
		public Assignment getCommandAssignment_4() { return cCommandAssignment_4; }
		
		//If
		public RuleCall getCommandIfParserRuleCall_4_0() { return cCommandIfParserRuleCall_4_0; }
		
		//command=Foreach
		public Assignment getCommandAssignment_5() { return cCommandAssignment_5; }
		
		//Foreach
		public RuleCall getCommandForeachParserRuleCall_5_0() { return cCommandForeachParserRuleCall_5_0; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpr1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpr1ExprParserRuleCall_1_0 = (RuleCall)cExpr1Assignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpr2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpr2ExprParserRuleCall_3_0 = (RuleCall)cExpr2Assignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsCommandsParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Foreach:
		//	'foreach' expr1=Expr 'in' expr2=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' expr1=Expr 'in' expr2=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//expr1=Expr
		public Assignment getExpr1Assignment_1() { return cExpr1Assignment_1; }
		
		//Expr
		public RuleCall getExpr1ExprParserRuleCall_1_0() { return cExpr1ExprParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//expr2=Expr
		public Assignment getExpr2Assignment_3() { return cExpr2Assignment_3; }
		
		//Expr
		public RuleCall getExpr2ExprParserRuleCall_3_0() { return cExpr2ExprParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_5_0() { return cCommandsCommandsParserRuleCall_5_0; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommands1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommands1CommandsParserRuleCall_3_0 = (RuleCall)cCommands1Assignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCommands2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCommands2CommandsParserRuleCall_4_1_0 = (RuleCall)cCommands2Assignment_4_1.eContents().get(0);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//If:
		//	'if' expr=Expr 'then' commands1=Commands (=> 'else' commands2=Commands)? 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expr=Expr 'then' commands1=Commands (=> 'else' commands2=Commands)? 'fi'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//commands1=Commands
		public Assignment getCommands1Assignment_3() { return cCommands1Assignment_3; }
		
		//Commands
		public RuleCall getCommands1CommandsParserRuleCall_3_0() { return cCommands1CommandsParserRuleCall_3_0; }
		
		//(=> 'else' commands2=Commands)?
		public Group getGroup_4() { return cGroup_4; }
		
		//=> 'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//commands2=Commands
		public Assignment getCommands2Assignment_4_1() { return cCommands2Assignment_4_1; }
		
		//Commands
		public RuleCall getCommands2CommandsParserRuleCall_4_1_0() { return cCommands2CommandsParserRuleCall_4_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//For:
		//	'for' expr=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' expr=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//While:
		//	'while' expr=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' expr=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprsimpleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprsimpleExprSimpleParserRuleCall_0_0 = (RuleCall)cExprsimpleAssignment_0.eContents().get(0);
		private final Assignment cExprAndAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprAndExprAndParserRuleCall_1_0 = (RuleCall)cExprAndAssignment_1.eContents().get(0);
		
		//Expr:
		//	=> exprsimple=ExprSimple | exprAnd=ExprAnd;
		@Override public ParserRule getRule() { return rule; }
		
		//=> exprsimple=ExprSimple | exprAnd=ExprAnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> exprsimple=ExprSimple
		public Assignment getExprsimpleAssignment_0() { return cExprsimpleAssignment_0; }
		
		//ExprSimple
		public RuleCall getExprsimpleExprSimpleParserRuleCall_0_0() { return cExprsimpleExprSimpleParserRuleCall_0_0; }
		
		//exprAnd=ExprAnd
		public Assignment getExprAndAssignment_1() { return cExprAndAssignment_1; }
		
		//ExprAnd
		public RuleCall getExprAndExprAndParserRuleCall_1_0() { return cExprAndExprAndParserRuleCall_1_0; }
	}
	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.ExprAnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cExprOrAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExprOrExprOrParserRuleCall_0_0_0_0 = (RuleCall)cExprOrAssignment_0_0_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cExprAndAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cExprAndExprAndParserRuleCall_0_0_2_0 = (RuleCall)cExprAndAssignment_0_0_2.eContents().get(0);
		private final Assignment cExprOrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprOrExprOrParserRuleCall_1_0 = (RuleCall)cExprOrAssignment_1.eContents().get(0);
		
		//ExprAnd:
		//	=> (exprOr=ExprOr '&&' exprAnd=ExprAnd) | exprOr=ExprOr;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (exprOr=ExprOr '&&' exprAnd=ExprAnd) | exprOr=ExprOr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (exprOr=ExprOr '&&' exprAnd=ExprAnd)
		public Group getGroup_0() { return cGroup_0; }
		
		//(exprOr=ExprOr '&&' exprAnd=ExprAnd)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//exprOr=ExprOr
		public Assignment getExprOrAssignment_0_0_0() { return cExprOrAssignment_0_0_0; }
		
		//ExprOr
		public RuleCall getExprOrExprOrParserRuleCall_0_0_0_0() { return cExprOrExprOrParserRuleCall_0_0_0_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0_0_1() { return cAmpersandAmpersandKeyword_0_0_1; }
		
		//exprAnd=ExprAnd
		public Assignment getExprAndAssignment_0_0_2() { return cExprAndAssignment_0_0_2; }
		
		//ExprAnd
		public RuleCall getExprAndExprAndParserRuleCall_0_0_2_0() { return cExprAndExprAndParserRuleCall_0_0_2_0; }
		
		//exprOr=ExprOr
		public Assignment getExprOrAssignment_1() { return cExprOrAssignment_1; }
		
		//ExprOr
		public RuleCall getExprOrExprOrParserRuleCall_1_0() { return cExprOrExprOrParserRuleCall_1_0; }
	}
	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.ExprOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cExprNotAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExprNotExprNotParserRuleCall_0_0_0_0 = (RuleCall)cExprNotAssignment_0_0_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cExprOrAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cExprOrExprOrParserRuleCall_0_0_2_0 = (RuleCall)cExprOrAssignment_0_0_2.eContents().get(0);
		private final Assignment cExprNotAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprNotExprNotParserRuleCall_1_0 = (RuleCall)cExprNotAssignment_1.eContents().get(0);
		
		//ExprOr:
		//	=> (exprNot=ExprNot '||' exprOr=ExprOr) | exprNot=ExprNot;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (exprNot=ExprNot '||' exprOr=ExprOr) | exprNot=ExprNot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (exprNot=ExprNot '||' exprOr=ExprOr)
		public Group getGroup_0() { return cGroup_0; }
		
		//(exprNot=ExprNot '||' exprOr=ExprOr)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//exprNot=ExprNot
		public Assignment getExprNotAssignment_0_0_0() { return cExprNotAssignment_0_0_0; }
		
		//ExprNot
		public RuleCall getExprNotExprNotParserRuleCall_0_0_0_0() { return cExprNotExprNotParserRuleCall_0_0_0_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_0_0_1() { return cVerticalLineVerticalLineKeyword_0_0_1; }
		
		//exprOr=ExprOr
		public Assignment getExprOrAssignment_0_0_2() { return cExprOrAssignment_0_0_2; }
		
		//ExprOr
		public RuleCall getExprOrExprOrParserRuleCall_0_0_2_0() { return cExprOrExprOrParserRuleCall_0_0_2_0; }
		
		//exprNot=ExprNot
		public Assignment getExprNotAssignment_1() { return cExprNotAssignment_1; }
		
		//ExprNot
		public RuleCall getExprNotExprNotParserRuleCall_1_0() { return cExprNotExprNotParserRuleCall_1_0; }
	}
	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_0_0_0 = (RuleCall)cNotAssignment_0_0.eContents().get(0);
		private final Assignment cExprEqAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprEqExprEqParserRuleCall_0_1_0 = (RuleCall)cExprEqAssignment_0_1.eContents().get(0);
		private final Assignment cExprEqAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprEqExprEqParserRuleCall_1_0 = (RuleCall)cExprEqAssignment_1.eContents().get(0);
		
		//ExprNot:
		//	not=Not exprEq=ExprEq | exprEq=ExprEq;
		@Override public ParserRule getRule() { return rule; }
		
		//not=Not exprEq=ExprEq | exprEq=ExprEq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//not=Not exprEq=ExprEq
		public Group getGroup_0() { return cGroup_0; }
		
		//not=Not
		public Assignment getNotAssignment_0_0() { return cNotAssignment_0_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_0_0_0() { return cNotNotParserRuleCall_0_0_0; }
		
		//exprEq=ExprEq
		public Assignment getExprEqAssignment_0_1() { return cExprEqAssignment_0_1; }
		
		//ExprEq
		public RuleCall getExprEqExprEqParserRuleCall_0_1_0() { return cExprEqExprEqParserRuleCall_0_1_0; }
		
		//exprEq=ExprEq
		public Assignment getExprEqAssignment_1() { return cExprEqAssignment_1; }
		
		//ExprEq
		public RuleCall getExprEqExprEqParserRuleCall_1_0() { return cExprEqExprEqParserRuleCall_1_0; }
	}
	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExprSimple1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExprSimple1ExprSimpleParserRuleCall_0_0_0 = (RuleCall)cExprSimple1Assignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprSimple2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprSimple2ExprSimpleParserRuleCall_0_2_0 = (RuleCall)cExprSimple2Assignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ExprEq:
		//	exprSimple1=ExprSimple '=?' exprSimple2=ExprSimple | '(' expr=Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//exprSimple1=ExprSimple '=?' exprSimple2=ExprSimple | '(' expr=Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exprSimple1=ExprSimple '=?' exprSimple2=ExprSimple
		public Group getGroup_0() { return cGroup_0; }
		
		//exprSimple1=ExprSimple
		public Assignment getExprSimple1Assignment_0_0() { return cExprSimple1Assignment_0_0; }
		
		//ExprSimple
		public RuleCall getExprSimple1ExprSimpleParserRuleCall_0_0_0() { return cExprSimple1ExprSimpleParserRuleCall_0_0_0; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_0_1() { return cEqualsSignQuestionMarkKeyword_0_1; }
		
		//exprSimple2=ExprSimple
		public Assignment getExprSimple2Assignment_0_2() { return cExprSimple2Assignment_0_2; }
		
		//ExprSimple
		public RuleCall getExprSimple2ExprSimpleParserRuleCall_0_2_0() { return cExprSimple2ExprSimpleParserRuleCall_0_2_0; }
		
		//'(' expr=Expr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_1_0() { return cExprExprParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Vars");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableVARIABLETerminalRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVarsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cVarsVarsParserRuleCall_0_2_0 = (RuleCall)cVarsAssignment_0_2.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//Vars:
		//	variable=VARIABLE ',' vars=Vars | variable=VARIABLE;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=VARIABLE ',' vars=Vars | variable=VARIABLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=VARIABLE ',' vars=Vars
		public Group getGroup_0() { return cGroup_0; }
		
		//variable=VARIABLE
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_0_0_0() { return cVariableVARIABLETerminalRuleCall_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//vars=Vars
		public Assignment getVarsAssignment_0_2() { return cVarsAssignment_0_2; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_0_2_0() { return cVarsVarsParserRuleCall_0_2_0; }
		
		//variable=VARIABLE
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_1_0() { return cVariableVARIABLETerminalRuleCall_1_0; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Exprs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0_0_0 = (RuleCall)cExprAssignment_0_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cExprsAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cExprsExprsParserRuleCall_0_0_2_0 = (RuleCall)cExprsAssignment_0_0_2.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Exprs:
		//	=> (expr=Expr ',' exprs=Exprs) | expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (expr=Expr ',' exprs=Exprs) | expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (expr=Expr ',' exprs=Exprs)
		public Group getGroup_0() { return cGroup_0; }
		
		//(expr=Expr ',' exprs=Exprs)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_0_0_0() { return cExprAssignment_0_0_0; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_0_0_0_0() { return cExprExprParserRuleCall_0_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_0_1() { return cCommaKeyword_0_0_1; }
		
		//exprs=Exprs
		public Assignment getExprsAssignment_0_0_2() { return cExprsAssignment_0_0_2; }
		
		//Exprs
		public RuleCall getExprsExprsParserRuleCall_0_0_2_0() { return cExprsExprsParserRuleCall_0_0_2_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValeurAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValeurNilKeyword_0_0 = (Keyword)cValeurAssignment_0.eContents().get(0);
		private final Assignment cValeurAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValeurVARIABLETerminalRuleCall_1_0 = (RuleCall)cValeurAssignment_1.eContents().get(0);
		private final Assignment cValeurAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValeurSYMBOLTerminalRuleCall_2_0 = (RuleCall)cValeurAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOpeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cOpeConsKeyword_3_1_0 = (Keyword)cOpeAssignment_3_1.eContents().get(0);
		private final Assignment cLexprAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLexprLexprParserRuleCall_3_2_0 = (RuleCall)cLexprAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOpeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cOpeListKeyword_4_1_0 = (Keyword)cOpeAssignment_4_1.eContents().get(0);
		private final Assignment cLexprAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cLexprLexprParserRuleCall_4_2_0 = (RuleCall)cLexprAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOpeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cOpeHdKeyword_5_1_0 = (Keyword)cOpeAssignment_5_1.eContents().get(0);
		private final Assignment cExprAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_5_2_0 = (RuleCall)cExprAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOpeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cOpeTlKeyword_6_1_0 = (Keyword)cOpeAssignment_6_1.eContents().get(0);
		private final Assignment cExprAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_6_2_0 = (RuleCall)cExprAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cValeurAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValeurSYMBOLTerminalRuleCall_7_1_0 = (RuleCall)cValeurAssignment_7_1.eContents().get(0);
		private final Assignment cLexprAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cLexprLexprParserRuleCall_7_2_0 = (RuleCall)cLexprAssignment_7_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//ExprSimple:
		//	valeur='nil' | valeur=VARIABLE | valeur=SYMBOL |
		//	'(' ope='cons' lexpr=Lexpr ')' |
		//	'(' ope='list' lexpr=Lexpr ')' |
		//	'(' ope='hd' expr=Expr ')' |
		//	'(' ope='tl' expr=Expr ')' |
		//	'(' valeur=SYMBOL lexpr=Lexpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//valeur='nil' | valeur=VARIABLE | valeur=SYMBOL | '(' ope='cons' lexpr=Lexpr ')' | '(' ope='list' lexpr=Lexpr ')' | '('
		//ope='hd' expr=Expr ')' | '(' ope='tl' expr=Expr ')' | '(' valeur=SYMBOL lexpr=Lexpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valeur='nil'
		public Assignment getValeurAssignment_0() { return cValeurAssignment_0; }
		
		//'nil'
		public Keyword getValeurNilKeyword_0_0() { return cValeurNilKeyword_0_0; }
		
		//valeur=VARIABLE
		public Assignment getValeurAssignment_1() { return cValeurAssignment_1; }
		
		//VARIABLE
		public RuleCall getValeurVARIABLETerminalRuleCall_1_0() { return cValeurVARIABLETerminalRuleCall_1_0; }
		
		//valeur=SYMBOL
		public Assignment getValeurAssignment_2() { return cValeurAssignment_2; }
		
		//SYMBOL
		public RuleCall getValeurSYMBOLTerminalRuleCall_2_0() { return cValeurSYMBOLTerminalRuleCall_2_0; }
		
		//'(' ope='cons' lexpr=Lexpr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//ope='cons'
		public Assignment getOpeAssignment_3_1() { return cOpeAssignment_3_1; }
		
		//'cons'
		public Keyword getOpeConsKeyword_3_1_0() { return cOpeConsKeyword_3_1_0; }
		
		//lexpr=Lexpr
		public Assignment getLexprAssignment_3_2() { return cLexprAssignment_3_2; }
		
		//Lexpr
		public RuleCall getLexprLexprParserRuleCall_3_2_0() { return cLexprLexprParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' ope='list' lexpr=Lexpr ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//ope='list'
		public Assignment getOpeAssignment_4_1() { return cOpeAssignment_4_1; }
		
		//'list'
		public Keyword getOpeListKeyword_4_1_0() { return cOpeListKeyword_4_1_0; }
		
		//lexpr=Lexpr
		public Assignment getLexprAssignment_4_2() { return cLexprAssignment_4_2; }
		
		//Lexpr
		public RuleCall getLexprLexprParserRuleCall_4_2_0() { return cLexprLexprParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//'(' ope='hd' expr=Expr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//ope='hd'
		public Assignment getOpeAssignment_5_1() { return cOpeAssignment_5_1; }
		
		//'hd'
		public Keyword getOpeHdKeyword_5_1_0() { return cOpeHdKeyword_5_1_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_5_2() { return cExprAssignment_5_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_5_2_0() { return cExprExprParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'(' ope='tl' expr=Expr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//ope='tl'
		public Assignment getOpeAssignment_6_1() { return cOpeAssignment_6_1; }
		
		//'tl'
		public Keyword getOpeTlKeyword_6_1_0() { return cOpeTlKeyword_6_1_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_6_2() { return cExprAssignment_6_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_6_2_0() { return cExprExprParserRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//'(' valeur=SYMBOL lexpr=Lexpr ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//valeur=SYMBOL
		public Assignment getValeurAssignment_7_1() { return cValeurAssignment_7_1; }
		
		//SYMBOL
		public RuleCall getValeurSYMBOLTerminalRuleCall_7_1_0() { return cValeurSYMBOLTerminalRuleCall_7_1_0; }
		
		//lexpr=Lexpr
		public Assignment getLexprAssignment_7_2() { return cLexprAssignment_7_2; }
		
		//Lexpr
		public RuleCall getLexprLexprParserRuleCall_7_2_0() { return cLexprLexprParserRuleCall_7_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }
	}
	public class LexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Lexpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0_0_0 = (RuleCall)cExprAssignment_0_0_0.eContents().get(0);
		private final Assignment cLexprAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cLexprLexprParserRuleCall_0_0_1_0 = (RuleCall)cLexprAssignment_0_0_1.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Lexpr:
		//	=> (expr=Expr lexpr=Lexpr) | expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (expr=Expr lexpr=Lexpr) | expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (expr=Expr lexpr=Lexpr)
		public Group getGroup_0() { return cGroup_0; }
		
		//(expr=Expr lexpr=Lexpr)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_0_0_0() { return cExprAssignment_0_0_0; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_0_0_0_0() { return cExprExprParserRuleCall_0_0_0_0; }
		
		//lexpr=Lexpr
		public Assignment getLexprAssignment_0_0_1() { return cLexprAssignment_0_0_1; }
		
		//Lexpr
		public RuleCall getLexprLexprParserRuleCall_0_0_1_0() { return cLexprLexprParserRuleCall_0_0_1_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Not");
		private final Assignment cNotAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNotExclamationMarkKeyword_0 = (Keyword)cNotAssignment.eContents().get(0);
		
		//Not:
		//	not='!';
		@Override public ParserRule getRule() { return rule; }
		
		//not='!'
		public Assignment getNotAssignment() { return cNotAssignment; }
		
		//'!'
		public Keyword getNotExclamationMarkKeyword_0() { return cNotExclamationMarkKeyword_0; }
	}
	public class ConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Cons");
		private final Assignment cConsAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cConsConsKeyword_0 = (Keyword)cConsAssignment.eContents().get(0);
		
		//Cons:
		//	cons='cons';
		@Override public ParserRule getRule() { return rule; }
		
		//cons='cons'
		public Assignment getConsAssignment() { return cConsAssignment; }
		
		//'cons'
		public Keyword getConsConsKeyword_0() { return cConsConsKeyword_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.List");
		private final Assignment cListAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cListListKeyword_0 = (Keyword)cListAssignment.eContents().get(0);
		
		//List:
		//	list='list';
		@Override public ParserRule getRule() { return rule; }
		
		//list='list'
		public Assignment getListAssignment() { return cListAssignment; }
		
		//'list'
		public Keyword getListListKeyword_0() { return cListListKeyword_0; }
	}
	public class HdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Hd");
		private final Assignment cHdAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cHdHdKeyword_0 = (Keyword)cHdAssignment.eContents().get(0);
		
		//Hd:
		//	hd='hd';
		@Override public ParserRule getRule() { return rule; }
		
		//hd='hd'
		public Assignment getHdAssignment() { return cHdAssignment; }
		
		//'hd'
		public Keyword getHdHdKeyword_0() { return cHdHdKeyword_0; }
	}
	public class TlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Tl");
		private final Assignment cTlAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTlTlKeyword_0 = (Keyword)cTlAssignment.eContents().get(0);
		
		//Tl:
		//	tl='tl';
		@Override public ParserRule getRule() { return rule; }
		
		//tl='tl'
		public Assignment getTlAssignment() { return cTlAssignment; }
		
		//'tl'
		public Keyword getTlTlKeyword_0() { return cTlTlKeyword_0; }
	}
	public class Nil2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.Nil2");
		private final Assignment cNilAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNilNilKeyword_0 = (Keyword)cNilAssignment.eContents().get(0);
		
		//Nil2:
		//	nil='nil';
		@Override public ParserRule getRule() { return rule; }
		
		//nil='nil'
		public Assignment getNilAssignment() { return cNilAssignment; }
		
		//'nil'
		public Keyword getNilNilKeyword_0() { return cNilNilKeyword_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final ReadElements pRead;
	private final WriteElements pWrite;
	private final AffectationElements pAffectation;
	private final NopElements pNop;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final ForeachElements pForeach;
	private final IfElements pIf;
	private final ForElements pFor;
	private final WhileElements pWhile;
	private final ExprElements pExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprSimpleElements pExprSimple;
	private final LexprElements pLexpr;
	private final NotElements pNot;
	private final ConsElements pCons;
	private final ListElements pList;
	private final HdElements pHd;
	private final TlElements pTl;
	private final Nil2Elements pNil2;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tNOMBRE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhileCompGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pRead = new ReadElements();
		this.pWrite = new WriteElements();
		this.pAffectation = new AffectationElements();
		this.pNop = new NopElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pForeach = new ForeachElements();
		this.pIf = new IfElements();
		this.pFor = new ForElements();
		this.pWhile = new WhileElements();
		this.pExpr = new ExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pLexpr = new LexprElements();
		this.pNot = new NotElements();
		this.pCons = new ConsElements();
		this.pList = new ListElements();
		this.pHd = new HdElements();
		this.pTl = new TlElements();
		this.pNil2 = new Nil2Elements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.VARIABLE");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.SYMBOL");
		this.tNOMBRE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.compilation.WhileComp.NOMBRE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("esir.compilation.WhileComp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * HEAD * / Program:
	//	functions+=Function*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' function=SYMBOL ':' definition=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	read=Read
	//	'%'
	//	commands=Commands
	//	'%'
	//	write=Write;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	/// * Input & Output * / Read:
	//	'read' variable+=VARIABLE (',' variable+=VARIABLE)*;
	public ReadElements getReadAccess() {
		return pRead;
	}
	
	public ParserRule getReadRule() {
		return getReadAccess().getRule();
	}
	
	//Write:
	//	'write' variable+=VARIABLE (',' variable+=VARIABLE)*;
	public WriteElements getWriteAccess() {
		return pWrite;
	}
	
	public ParserRule getWriteRule() {
		return getWriteAccess().getRule();
	}
	
	/// * Commandes * / Affectation:
	//	affectations+=VARIABLE (',' affectations+=VARIABLE)* ':=' valeurs+=Expr (',' valeurs+=Expr)*
	//	/ * TODO Ajouter ExprSimple * /;
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//Nop:
	//	nop='nop';
	public NopElements getNopAccess() {
		return pNop;
	}
	
	public ParserRule getNopRule() {
		return getNopAccess().getRule();
	}
	
	//Commands:
	//	command=Command (';' commands+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	command=Nop | command=Affectation | command=While | command=For | command=If | command=Foreach;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Foreach:
	//	'foreach' expr1=Expr 'in' expr2=Expr 'do' commands=Commands 'od';
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//If:
	//	'if' expr=Expr 'then' commands1=Commands (=> 'else' commands2=Commands)? 'fi';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//For:
	//	'for' expr=Expr 'do' commands=Commands 'od';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//While:
	//	'while' expr=Expr 'do' commands=Commands 'od';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Expr:
	//	=> exprsimple=ExprSimple | exprAnd=ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ExprAnd:
	//	=> (exprOr=ExprOr '&&' exprAnd=ExprAnd) | exprOr=ExprOr;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}
	
	//ExprOr:
	//	=> (exprNot=ExprNot '||' exprOr=ExprOr) | exprNot=ExprNot;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}
	
	//ExprNot:
	//	not=Not exprEq=ExprEq | exprEq=ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}
	
	//ExprEq:
	//	exprSimple1=ExprSimple '=?' exprSimple2=ExprSimple | '(' expr=Expr ')';
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}
	
	//Vars:
	//	variable=VARIABLE ',' vars=Vars | variable=VARIABLE;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Exprs:
	//	=> (expr=Expr ',' exprs=Exprs) | expr=Expr;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//ExprSimple:
	//	valeur='nil' | valeur=VARIABLE | valeur=SYMBOL |
	//	'(' ope='cons' lexpr=Lexpr ')' |
	//	'(' ope='list' lexpr=Lexpr ')' |
	//	'(' ope='hd' expr=Expr ')' |
	//	'(' ope='tl' expr=Expr ')' |
	//	'(' valeur=SYMBOL lexpr=Lexpr ')';
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//Lexpr:
	//	=> (expr=Expr lexpr=Lexpr) | expr=Expr;
	public LexprElements getLexprAccess() {
		return pLexpr;
	}
	
	public ParserRule getLexprRule() {
		return getLexprAccess().getRule();
	}
	
	//Not:
	//	not='!';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Cons:
	//	cons='cons';
	public ConsElements getConsAccess() {
		return pCons;
	}
	
	public ParserRule getConsRule() {
		return getConsAccess().getRule();
	}
	
	//List:
	//	list='list';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Hd:
	//	hd='hd';
	public HdElements getHdAccess() {
		return pHd;
	}
	
	public ParserRule getHdRule() {
		return getHdAccess().getRule();
	}
	
	//Tl:
	//	tl='tl';
	public TlElements getTlAccess() {
		return pTl;
	}
	
	public ParserRule getTlRule() {
		return getTlAccess().getRule();
	}
	
	//Nil2:
	//	nil='nil';
	public Nil2Elements getNil2Access() {
		return pNil2;
	}
	
	public ParserRule getNil2Rule() {
		return getNil2Access().getRule();
	}
	
	//terminal VARIABLE:
	//	'A'..'Z' ('A'..'Z' | 'a'..'z')*;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal SYMBOL:
	//	'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9')* ((('-' | '+' | '.' | '/' | '_' | '&') | "->") ('A'..'Z' | 'a'..'z' |
	//	'0'..'9')+)* ('!' | '?')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal NOMBRE:
	//	'1'..'9' '0'..'9'*;
	public TerminalRule getNOMBRERule() {
		return tNOMBRE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
