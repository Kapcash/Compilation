/**
 * generated by Xtext 2.10.0
 */
package esir.compilation.whileComp.impl;

import esir.compilation.whileComp.Affectation;
import esir.compilation.whileComp.WhileCompPackage;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Affectation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link esir.compilation.whileComp.impl.AffectationImpl#getAffectations <em>Affectations</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.AffectationImpl#getValeurs <em>Valeurs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AffectationImpl extends MinimalEObjectImpl.Container implements Affectation
{
  /**
   * The cached value of the '{@link #getAffectations() <em>Affectations</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAffectations()
   * @generated
   * @ordered
   */
  protected EList<String> affectations;

  /**
   * The cached value of the '{@link #getValeurs() <em>Valeurs</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValeurs()
   * @generated
   * @ordered
   */
  protected EList<String> valeurs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AffectationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileCompPackage.Literals.AFFECTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getAffectations()
  {
    if (affectations == null)
    {
      affectations = new EDataTypeEList<String>(String.class, this, WhileCompPackage.AFFECTATION__AFFECTATIONS);
    }
    return affectations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getValeurs()
  {
    if (valeurs == null)
    {
      valeurs = new EDataTypeEList<String>(String.class, this, WhileCompPackage.AFFECTATION__VALEURS);
    }
    return valeurs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__AFFECTATIONS:
        return getAffectations();
      case WhileCompPackage.AFFECTATION__VALEURS:
        return getValeurs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__AFFECTATIONS:
        getAffectations().clear();
        getAffectations().addAll((Collection<? extends String>)newValue);
        return;
      case WhileCompPackage.AFFECTATION__VALEURS:
        getValeurs().clear();
        getValeurs().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__AFFECTATIONS:
        getAffectations().clear();
        return;
      case WhileCompPackage.AFFECTATION__VALEURS:
        getValeurs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__AFFECTATIONS:
        return affectations != null && !affectations.isEmpty();
      case WhileCompPackage.AFFECTATION__VALEURS:
        return valeurs != null && !valeurs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (affectations: ");
    result.append(affectations);
    result.append(", valeurs: ");
    result.append(valeurs);
    result.append(')');
    return result.toString();
  }

} //AffectationImpl
