/**
 * generated by Xtext 2.10.0
 */
package esir.compilation.whileComp.impl;

import esir.compilation.whileComp.Affectation;
import esir.compilation.whileComp.Nil2;
import esir.compilation.whileComp.WhileCompPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Affectation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link esir.compilation.whileComp.impl.AffectationImpl#getAffectation <em>Affectation</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.AffectationImpl#getValeur <em>Valeur</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.AffectationImpl#getNil <em>Nil</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AffectationImpl extends MinimalEObjectImpl.Container implements Affectation
{
  /**
   * The default value of the '{@link #getAffectation() <em>Affectation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAffectation()
   * @generated
   * @ordered
   */
  protected static final String AFFECTATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAffectation() <em>Affectation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAffectation()
   * @generated
   * @ordered
   */
  protected String affectation = AFFECTATION_EDEFAULT;

  /**
   * The default value of the '{@link #getValeur() <em>Valeur</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValeur()
   * @generated
   * @ordered
   */
  protected static final String VALEUR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValeur() <em>Valeur</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValeur()
   * @generated
   * @ordered
   */
  protected String valeur = VALEUR_EDEFAULT;

  /**
   * The cached value of the '{@link #getNil() <em>Nil</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected Nil2 nil;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AffectationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileCompPackage.Literals.AFFECTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAffectation()
  {
    return affectation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAffectation(String newAffectation)
  {
    String oldAffectation = affectation;
    affectation = newAffectation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.AFFECTATION__AFFECTATION, oldAffectation, affectation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getValeur()
  {
    return valeur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValeur(String newValeur)
  {
    String oldValeur = valeur;
    valeur = newValeur;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.AFFECTATION__VALEUR, oldValeur, valeur));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Nil2 getNil()
  {
    return nil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNil(Nil2 newNil, NotificationChain msgs)
  {
    Nil2 oldNil = nil;
    nil = newNil;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.AFFECTATION__NIL, oldNil, newNil);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNil(Nil2 newNil)
  {
    if (newNil != nil)
    {
      NotificationChain msgs = null;
      if (nil != null)
        msgs = ((InternalEObject)nil).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.AFFECTATION__NIL, null, msgs);
      if (newNil != null)
        msgs = ((InternalEObject)newNil).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.AFFECTATION__NIL, null, msgs);
      msgs = basicSetNil(newNil, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.AFFECTATION__NIL, newNil, newNil));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__NIL:
        return basicSetNil(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__AFFECTATION:
        return getAffectation();
      case WhileCompPackage.AFFECTATION__VALEUR:
        return getValeur();
      case WhileCompPackage.AFFECTATION__NIL:
        return getNil();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__AFFECTATION:
        setAffectation((String)newValue);
        return;
      case WhileCompPackage.AFFECTATION__VALEUR:
        setValeur((String)newValue);
        return;
      case WhileCompPackage.AFFECTATION__NIL:
        setNil((Nil2)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__AFFECTATION:
        setAffectation(AFFECTATION_EDEFAULT);
        return;
      case WhileCompPackage.AFFECTATION__VALEUR:
        setValeur(VALEUR_EDEFAULT);
        return;
      case WhileCompPackage.AFFECTATION__NIL:
        setNil((Nil2)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.AFFECTATION__AFFECTATION:
        return AFFECTATION_EDEFAULT == null ? affectation != null : !AFFECTATION_EDEFAULT.equals(affectation);
      case WhileCompPackage.AFFECTATION__VALEUR:
        return VALEUR_EDEFAULT == null ? valeur != null : !VALEUR_EDEFAULT.equals(valeur);
      case WhileCompPackage.AFFECTATION__NIL:
        return nil != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (affectation: ");
    result.append(affectation);
    result.append(", valeur: ");
    result.append(valeur);
    result.append(')');
    return result.toString();
  }

} //AffectationImpl
