/**
 * generated by Xtext 2.10.0
 */
package esir.compilation.whileComp.impl;

import esir.compilation.whileComp.Expr;
import esir.compilation.whileComp.ExprSimple;
import esir.compilation.whileComp.Lexpr;
import esir.compilation.whileComp.Not;
import esir.compilation.whileComp.WhileCompPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Simple</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link esir.compilation.whileComp.impl.ExprSimpleImpl#getValeur <em>Valeur</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.ExprSimpleImpl#getOpe <em>Ope</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.ExprSimpleImpl#getLexpr <em>Lexpr</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.ExprSimpleImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.ExprSimpleImpl#getN <em>N</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.ExprSimpleImpl#getCall <em>Call</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.ExprSimpleImpl#getEx1 <em>Ex1</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.ExprSimpleImpl#getEx2 <em>Ex2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprSimpleImpl extends MinimalEObjectImpl.Container implements ExprSimple
{
  /**
   * The default value of the '{@link #getValeur() <em>Valeur</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValeur()
   * @generated
   * @ordered
   */
  protected static final String VALEUR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValeur() <em>Valeur</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValeur()
   * @generated
   * @ordered
   */
  protected String valeur = VALEUR_EDEFAULT;

  /**
   * The default value of the '{@link #getOpe() <em>Ope</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpe()
   * @generated
   * @ordered
   */
  protected static final String OPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOpe() <em>Ope</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpe()
   * @generated
   * @ordered
   */
  protected String ope = OPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getLexpr() <em>Lexpr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLexpr()
   * @generated
   * @ordered
   */
  protected Lexpr lexpr;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected Expr expr;

  /**
   * The cached value of the '{@link #getN() <em>N</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN()
   * @generated
   * @ordered
   */
  protected Not n;

  /**
   * The default value of the '{@link #getCall() <em>Call</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCall()
   * @generated
   * @ordered
   */
  protected static final String CALL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCall() <em>Call</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCall()
   * @generated
   * @ordered
   */
  protected String call = CALL_EDEFAULT;

  /**
   * The cached value of the '{@link #getEx1() <em>Ex1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEx1()
   * @generated
   * @ordered
   */
  protected Expr ex1;

  /**
   * The cached value of the '{@link #getEx2() <em>Ex2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEx2()
   * @generated
   * @ordered
   */
  protected Expr ex2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExprSimpleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileCompPackage.Literals.EXPR_SIMPLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getValeur()
  {
    return valeur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValeur(String newValeur)
  {
    String oldValeur = valeur;
    valeur = newValeur;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__VALEUR, oldValeur, valeur));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOpe()
  {
    return ope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOpe(String newOpe)
  {
    String oldOpe = ope;
    ope = newOpe;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__OPE, oldOpe, ope));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lexpr getLexpr()
  {
    return lexpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLexpr(Lexpr newLexpr, NotificationChain msgs)
  {
    Lexpr oldLexpr = lexpr;
    lexpr = newLexpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__LEXPR, oldLexpr, newLexpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLexpr(Lexpr newLexpr)
  {
    if (newLexpr != lexpr)
    {
      NotificationChain msgs = null;
      if (lexpr != null)
        msgs = ((InternalEObject)lexpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__LEXPR, null, msgs);
      if (newLexpr != null)
        msgs = ((InternalEObject)newLexpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__LEXPR, null, msgs);
      msgs = basicSetLexpr(newLexpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__LEXPR, newLexpr, newLexpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(Expr newExpr, NotificationChain msgs)
  {
    Expr oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(Expr newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not getN()
  {
    return n;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetN(Not newN, NotificationChain msgs)
  {
    Not oldN = n;
    n = newN;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__N, oldN, newN);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setN(Not newN)
  {
    if (newN != n)
    {
      NotificationChain msgs = null;
      if (n != null)
        msgs = ((InternalEObject)n).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__N, null, msgs);
      if (newN != null)
        msgs = ((InternalEObject)newN).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__N, null, msgs);
      msgs = basicSetN(newN, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__N, newN, newN));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCall()
  {
    return call;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCall(String newCall)
  {
    String oldCall = call;
    call = newCall;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__CALL, oldCall, call));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getEx1()
  {
    return ex1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEx1(Expr newEx1, NotificationChain msgs)
  {
    Expr oldEx1 = ex1;
    ex1 = newEx1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__EX1, oldEx1, newEx1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEx1(Expr newEx1)
  {
    if (newEx1 != ex1)
    {
      NotificationChain msgs = null;
      if (ex1 != null)
        msgs = ((InternalEObject)ex1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__EX1, null, msgs);
      if (newEx1 != null)
        msgs = ((InternalEObject)newEx1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__EX1, null, msgs);
      msgs = basicSetEx1(newEx1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__EX1, newEx1, newEx1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getEx2()
  {
    return ex2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEx2(Expr newEx2, NotificationChain msgs)
  {
    Expr oldEx2 = ex2;
    ex2 = newEx2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__EX2, oldEx2, newEx2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEx2(Expr newEx2)
  {
    if (newEx2 != ex2)
    {
      NotificationChain msgs = null;
      if (ex2 != null)
        msgs = ((InternalEObject)ex2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__EX2, null, msgs);
      if (newEx2 != null)
        msgs = ((InternalEObject)newEx2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__EX2, null, msgs);
      msgs = basicSetEx2(newEx2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__EX2, newEx2, newEx2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        return basicSetLexpr(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        return basicSetExpr(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__N:
        return basicSetN(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__EX1:
        return basicSetEx1(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__EX2:
        return basicSetEx2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__VALEUR:
        return getValeur();
      case WhileCompPackage.EXPR_SIMPLE__OPE:
        return getOpe();
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        return getLexpr();
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        return getExpr();
      case WhileCompPackage.EXPR_SIMPLE__N:
        return getN();
      case WhileCompPackage.EXPR_SIMPLE__CALL:
        return getCall();
      case WhileCompPackage.EXPR_SIMPLE__EX1:
        return getEx1();
      case WhileCompPackage.EXPR_SIMPLE__EX2:
        return getEx2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__VALEUR:
        setValeur((String)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__OPE:
        setOpe((String)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        setLexpr((Lexpr)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        setExpr((Expr)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__N:
        setN((Not)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__CALL:
        setCall((String)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__EX1:
        setEx1((Expr)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__EX2:
        setEx2((Expr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__VALEUR:
        setValeur(VALEUR_EDEFAULT);
        return;
      case WhileCompPackage.EXPR_SIMPLE__OPE:
        setOpe(OPE_EDEFAULT);
        return;
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        setLexpr((Lexpr)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        setExpr((Expr)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__N:
        setN((Not)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__CALL:
        setCall(CALL_EDEFAULT);
        return;
      case WhileCompPackage.EXPR_SIMPLE__EX1:
        setEx1((Expr)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__EX2:
        setEx2((Expr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__VALEUR:
        return VALEUR_EDEFAULT == null ? valeur != null : !VALEUR_EDEFAULT.equals(valeur);
      case WhileCompPackage.EXPR_SIMPLE__OPE:
        return OPE_EDEFAULT == null ? ope != null : !OPE_EDEFAULT.equals(ope);
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        return lexpr != null;
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        return expr != null;
      case WhileCompPackage.EXPR_SIMPLE__N:
        return n != null;
      case WhileCompPackage.EXPR_SIMPLE__CALL:
        return CALL_EDEFAULT == null ? call != null : !CALL_EDEFAULT.equals(call);
      case WhileCompPackage.EXPR_SIMPLE__EX1:
        return ex1 != null;
      case WhileCompPackage.EXPR_SIMPLE__EX2:
        return ex2 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (valeur: ");
    result.append(valeur);
    result.append(", ope: ");
    result.append(ope);
    result.append(", call: ");
    result.append(call);
    result.append(')');
    return result.toString();
  }

} //ExprSimpleImpl
