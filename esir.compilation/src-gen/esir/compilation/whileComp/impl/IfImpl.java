/**
 * generated by Xtext 2.10.0
 */
package esir.compilation.whileComp.impl;

import esir.compilation.whileComp.Commands;
import esir.compilation.whileComp.Expr;
import esir.compilation.whileComp.If;
import esir.compilation.whileComp.WhileCompPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link esir.compilation.whileComp.impl.IfImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.IfImpl#getCommands1 <em>Commands1</em>}</li>
 *   <li>{@link esir.compilation.whileComp.impl.IfImpl#getCommands2 <em>Commands2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfImpl extends MinimalEObjectImpl.Container implements If
{
  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected Expr expr;

  /**
   * The cached value of the '{@link #getCommands1() <em>Commands1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands1()
   * @generated
   * @ordered
   */
  protected Commands commands1;

  /**
   * The cached value of the '{@link #getCommands2() <em>Commands2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands2()
   * @generated
   * @ordered
   */
  protected Commands commands2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileCompPackage.Literals.IF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(Expr newExpr, NotificationChain msgs)
  {
    Expr oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.IF__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(Expr newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.IF__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.IF__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.IF__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Commands getCommands1()
  {
    return commands1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCommands1(Commands newCommands1, NotificationChain msgs)
  {
    Commands oldCommands1 = commands1;
    commands1 = newCommands1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.IF__COMMANDS1, oldCommands1, newCommands1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCommands1(Commands newCommands1)
  {
    if (newCommands1 != commands1)
    {
      NotificationChain msgs = null;
      if (commands1 != null)
        msgs = ((InternalEObject)commands1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.IF__COMMANDS1, null, msgs);
      if (newCommands1 != null)
        msgs = ((InternalEObject)newCommands1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.IF__COMMANDS1, null, msgs);
      msgs = basicSetCommands1(newCommands1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.IF__COMMANDS1, newCommands1, newCommands1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Commands getCommands2()
  {
    return commands2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCommands2(Commands newCommands2, NotificationChain msgs)
  {
    Commands oldCommands2 = commands2;
    commands2 = newCommands2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.IF__COMMANDS2, oldCommands2, newCommands2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCommands2(Commands newCommands2)
  {
    if (newCommands2 != commands2)
    {
      NotificationChain msgs = null;
      if (commands2 != null)
        msgs = ((InternalEObject)commands2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.IF__COMMANDS2, null, msgs);
      if (newCommands2 != null)
        msgs = ((InternalEObject)newCommands2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.IF__COMMANDS2, null, msgs);
      msgs = basicSetCommands2(newCommands2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.IF__COMMANDS2, newCommands2, newCommands2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhileCompPackage.IF__EXPR:
        return basicSetExpr(null, msgs);
      case WhileCompPackage.IF__COMMANDS1:
        return basicSetCommands1(null, msgs);
      case WhileCompPackage.IF__COMMANDS2:
        return basicSetCommands2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileCompPackage.IF__EXPR:
        return getExpr();
      case WhileCompPackage.IF__COMMANDS1:
        return getCommands1();
      case WhileCompPackage.IF__COMMANDS2:
        return getCommands2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileCompPackage.IF__EXPR:
        setExpr((Expr)newValue);
        return;
      case WhileCompPackage.IF__COMMANDS1:
        setCommands1((Commands)newValue);
        return;
      case WhileCompPackage.IF__COMMANDS2:
        setCommands2((Commands)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.IF__EXPR:
        setExpr((Expr)null);
        return;
      case WhileCompPackage.IF__COMMANDS1:
        setCommands1((Commands)null);
        return;
      case WhileCompPackage.IF__COMMANDS2:
        setCommands2((Commands)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.IF__EXPR:
        return expr != null;
      case WhileCompPackage.IF__COMMANDS1:
        return commands1 != null;
      case WhileCompPackage.IF__COMMANDS2:
        return commands2 != null;
    }
    return super.eIsSet(featureID);
  }

} //IfImpl
