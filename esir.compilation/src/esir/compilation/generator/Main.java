package esir.compilation.generator;
/*
 * generated by Xtext 2.10.0
 */

import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import esir.compilation.ErrorException;
import esir.compilation.WhileCompStandaloneSetup;
import utilitaires.Constante;

public class Main {
	
	private static final boolean isDebugMode = Constante.DEBUG_TRACE;

	public static void main(String[] args) throws ErrorException {
		Injector injector = new WhileCompStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		try{
			main.runGenerator(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
		}catch (ErrorException e){throw e;}
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private WhileCompGenerator generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String string,String sortie,String indentAll,String indentFor,String indentWhile,String indentIf,String indentForeach,String indentAff) throws ErrorException {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(string), true);
		int idenAll = 1;
		if(!indentAll.equals(null)){
			idenAll = Integer.parseInt(indentAll);
		}
		int idenFor = 0;
		if(!indentFor.equals(null)){
			idenFor = Integer.parseInt(indentFor);
		}
		int idenWhile = 0;
		if(!indentWhile.equals(null)){
			idenWhile = Integer.parseInt(indentWhile);
		}
		int idenIf = 0;
		if(!indentIf.equals(null)){
			idenIf = Integer.parseInt(indentIf);
		}
		int idenForeach = 0;
		if(!indentForeach.equals(null)){
			idenForeach = Integer.parseInt(indentForeach);
		}
		int idenAff = 1;
		if(!indentAff.equals(null)){
			idenAff = Integer.parseInt(indentAff);
		}

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				//System.err.println(issue);
				throw new ErrorException(issue.getMessage());
			}
			return;
		}

		// Configure and start the generator
		fileAccess.setOutputPath("./");
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.doGenerate(resource, fileAccess, context, sortie,idenAll,idenFor,idenWhile,idenIf,idenForeach,idenAff);

		if (isDebugMode){System.out.println("Code Generation finish !");}
	}
}