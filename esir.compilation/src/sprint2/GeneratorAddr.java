package sprint2;
/*
 * generated by Xtext 2.10.0
 */

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import esir.compilation.WhileCompStandaloneSetup;
import esir.compilation.whileComp.Affectation;
import esir.compilation.whileComp.Command;
import esir.compilation.whileComp.Commands;
import esir.compilation.whileComp.Definition;
import esir.compilation.whileComp.For;
import esir.compilation.whileComp.Foreach;
import esir.compilation.whileComp.Function;
import esir.compilation.whileComp.If;
import esir.compilation.whileComp.Program;
import esir.compilation.whileComp.Read;
import esir.compilation.whileComp.While;
import esir.compilation.whileComp.Write;

public class GeneratorAddr {

// MAIN //
	public static void main(String[] args) {
		System.out.println("Constructing symbole table.");
		Injector injector = new WhileCompStandaloneSetup().createInjectorAndDoEMFRegistration();
		GeneratorAddr main = injector.getInstance(GeneratorAddr.class);
		try{
			main.createSymTable("../exemple2.wh","./");
		} catch(SymTableException e){
			System.out.println("[ERROR] : "+e.getMessage());
		}
	}
// ---- //
	
	@Inject
	private Provider<ResourceSet> resourceSetProvider;
	
	@Inject
	private IResourceValidator validator;
	
	/**
	 * List of declared functions in the Program
	 */
	HashMap<String,DefFun> funList = new HashMap<String,DefFun>();;
	HashMap<String, LinkedList<Quadruplet<OPCode<OP, String>, String, String, String>>> code3Addr = new HashMap<String,LinkedList<Quadruplet<OPCode<OP, String>, String, String, String>>>();

	private String etiquetteEnCours;
	
	private void createSymTable(String string,String sortie) throws SymTableException{
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(string), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}
		
		TreeIterator<EObject> tree = resource.getAllContents();
		while(tree.hasNext()){
			EObject next = tree.next();
			if(next instanceof Program)
				iterateAST((Program)next); //Parcours l'AST du 'Program'
		}
		
		System.out.println("Symboles Table correctly generated.");
	}
	
//Program	
	private void iterateAST(Program prog)throws SymTableException{
		for (Function f : prog.getFunctions()){
			iterateAST(f);
		}
		displaySymTable();
		System.out.println("Code 3 Addr :\n" + code3Addr);
	}
	
	private void displaySymTable(){
		System.out.println();
		for(String f : funList.keySet()){
			System.out.println(f+" : "+funList.get(f)+"\n");
		}
		
	}
	
//Function	
	private void iterateAST(Function f) throws SymTableException{
		String fName = f.getFunction();
		changementEtiquette();
		boolean fun = funList.keySet().contains(f);
		if(fun){ //Function already existing
			throw new SymTableException("Function "+fName+" already declared !");
		} else {
			DefFun function = new DefFun();
			funList.put(fName, function); //Adding a new blank function (DefFun)
			iterateAST(f.getDefinition(),function);
		}
	}
	
//Definition	
	private void iterateAST(Definition def, DefFun f){
		//Inputs
		iterateAST(def.getRead(), f);
		//Commands
		iterateAST(def.getCommands(), f);
		//Outputs
		iterateAST(def.getWrite(), f);
	}
	
//Read
	public void iterateAST(Read read, DefFun f){
		EList<String> varsR = read.getVariable();
		f.setIn(varsR.size());
		for(String v : varsR){
			f.updateVar(v,null);
		}
	}
	
//Write
	private void iterateAST(Write write, DefFun f){
		EList<String> varsW = write.getVariable();
		f.setOut(varsW.size());
		for(String v : varsW){
			f.updateVar(v,null);
		}
	}
	
//Commands	
	public void iterateAST(Commands coms, DefFun f){
		Command com = coms.getCommand();
		iterateAST(com, f); //First command of definition
		for(Command c : coms.getCommands()){ //Eventually other commands
			iterateAST(c, f);
		}
	}
	
//Command	
	private void iterateAST(Command com, DefFun f){
		EObject obj = com.getCommand();
		if(obj instanceof Affectation){		//Affectation
			iterateAST((Affectation) obj, f);
		} else if(obj instanceof While){	//While
			iterateAST((While) obj, f);
		} else if(obj instanceof For){		//For
			iterateAST((For) obj, f);
		} else if(obj instanceof Foreach){	//Foreach
			iterateAST((Foreach) obj, f);
		} else if(obj instanceof If){		//If
			iterateAST((If) obj, f);
		} else {
		}
	}
	
//Affectation	
	private void iterateAST(Affectation affCmd, DefFun f){
		EList<String> affs = affCmd.getAffectations();
		EList<String> vals = affCmd.getValeurs();
		Iterator<String> itAff = affs.iterator();
		Iterator<String> itVal = vals.iterator();
		
		while(itAff.hasNext() && itVal.hasNext()){
			String var = itAff.next();
			String val = itVal.next();
			//System.out.println("UPDATE "+var+":"+val);
			addIn3Addr(new Quadruplet<OPCode<OP, String>, String, String, String>(
					new OPCode<OP, String>(OP.AFF, ""), var, val, ""));
			f.updateVar(var, val);
		}
	}
	
//While	
	private void iterateAST(While whCmd, DefFun f){
		changementEtiquette();
		addIn3Addr(new Quadruplet<OPCode<OP, String>, String, String, String>(
				new OPCode<OP, String>(OP.WHILE, ""), "TODO", "", ""));
		Commands cmds = whCmd.getCommands();
		iterateAST(cmds ,f);
	}
	
//For	
	private void iterateAST(For forCmd, DefFun f){
		changementEtiquette();
		addIn3Addr( new Quadruplet<OPCode<OP, String>, String, String, String>(
				new OPCode<OP, String>(OP.FOR, ""), "TODO", "", ""));
		Commands cmds = forCmd.getCommands();
		iterateAST(cmds ,f);
	}
	
//Foreach	
	private void iterateAST(Foreach forEachCmd, DefFun f){
		Commands cmds = forEachCmd.getCommands();
		iterateAST(cmds ,f);
	}
	
//If	
	private void iterateAST(If ifCmd, DefFun f){
		changementEtiquette();
		addIn3Addr( new Quadruplet<OPCode<OP, String>, String, String, String>(
				new OPCode<OP, String>(OP.IF, ""), "TODO", "", ""));
		
		Commands cmds1 = ifCmd.getCommands1();
		Commands cmds2 = ifCmd.getCommands2();
		iterateAST(cmds1 ,f);
		iterateAST(cmds2 ,f);
	}
	
	private void addIn3Addr(Quadruplet<OPCode<OP, String>, String, String, String> q){
		if(etiquetteEnCours==null){
			etiquetteEnCours = "L"+code3Addr.size();
		}
		LinkedList<Quadruplet<OPCode<OP, String>, String, String, String>> l = code3Addr.get(etiquetteEnCours);
		if(l==null){
			l = new LinkedList<Quadruplet<OPCode<OP, String>, String, String, String>>();
			l.add(q);
			code3Addr.put(etiquetteEnCours, l);
		}else{
			l.add(q);
		}
	}
	
	private void changementEtiquette() {
		etiquetteEnCours=null;		
	}
}
