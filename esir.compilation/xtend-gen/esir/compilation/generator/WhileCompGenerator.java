/**
 * generated by Xtext 2.10.0
 */
package esir.compilation.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import esir.compilation.whileComp.Affectation;
import esir.compilation.whileComp.Command;
import esir.compilation.whileComp.Commands;
import esir.compilation.whileComp.Definition;
import esir.compilation.whileComp.Expr;
import esir.compilation.whileComp.ExprAnd;
import esir.compilation.whileComp.ExprEq;
import esir.compilation.whileComp.ExprNot;
import esir.compilation.whileComp.ExprOr;
import esir.compilation.whileComp.ExprSimple;
import esir.compilation.whileComp.Function;
import esir.compilation.whileComp.Nil2;
import esir.compilation.whileComp.Nop;
import esir.compilation.whileComp.Not;
import esir.compilation.whileComp.Program;
import esir.compilation.whileComp.Read;
import esir.compilation.whileComp.While;
import esir.compilation.whileComp.Write;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhileCompGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program e : _filter) {
      CharSequence _compile = this.compile(e);
      fsa.generateFile("Result_output.whpp", _compile);
    }
  }
  
  public CharSequence compile(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Function> _functions = p.getFunctions();
      for(final Function f : _functions) {
        CharSequence _compile = this.compile(f);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Function c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _function = c.getFunction();
    _builder.append(_function, "");
    _builder.append(": ");
    _builder.newLineIfNotEmpty();
    _builder.append("read");
    {
      Definition _definition = c.getDefinition();
      Read _read = _definition.getRead();
      EList<String> _variable = _read.getVariable();
      boolean _hasElements = false;
      for(final String param : _variable) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(" ");
        _builder.append(param, "");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    {
      Definition _definition_1 = c.getDefinition();
      Commands _commands = _definition_1.getCommands();
      EList<Command> _commands_1 = _commands.getCommands();
      for(final Command f : _commands_1) {
        CharSequence _compile = this.compile(((Command) f));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("%");
    _builder.newLine();
    _builder.append("write");
    {
      Definition _definition_2 = c.getDefinition();
      Write _write = _definition_2.getWrite();
      EList<String> _variable_1 = _write.getVariable();
      boolean _hasElements_1 = false;
      for(final String param_1 : _variable_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(" ");
        _builder.append(param_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Commands coms) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t", "");
    Command _command = coms.getCommand();
    Object _compile = this.compile(_command);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    {
      EList<Command> _commands = coms.getCommands();
      for(final Command c : _commands) {
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Object _compile_1 = this.compile(c);
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Command c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _command = c.getCommand();
      if ((_command instanceof Affectation)) {
        {
          EObject _command_1 = c.getCommand();
          Nil2 _nil = ((Affectation) _command_1).getNil();
          if ((_nil instanceof Nil2)) {
            _builder.append("\t", "");
            EObject _command_2 = c.getCommand();
            String _affectation = ((Affectation) _command_2).getAffectation();
            _builder.append(_affectation, "");
            _builder.append(" := ");
            EObject _command_3 = c.getCommand();
            Nil2 _nil_1 = ((Affectation) _command_3).getNil();
            String _nil_2 = _nil_1.getNil();
            _builder.append(_nil_2, "");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t", "");
            EObject _command_4 = c.getCommand();
            String _affectation_1 = ((Affectation) _command_4).getAffectation();
            _builder.append(_affectation_1, "");
            _builder.append(" := ");
            EObject _command_5 = c.getCommand();
            String _valeur = ((Affectation) _command_5).getValeur();
            _builder.append(_valeur, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EObject _command_6 = c.getCommand();
      if ((_command_6 instanceof Nop)) {
        _builder.append("\t", "");
        _builder.append("nop");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EObject _command_7 = c.getCommand();
      if ((_command_7 instanceof While)) {
        _builder.append("\t", "");
        _builder.append("while ");
        EObject _command_8 = c.getCommand();
        Expr _expr = ((While) _command_8).getExpr();
        CharSequence _compile = this.compile(_expr);
        _builder.append(_compile, "");
        _builder.append("\tdo");
        _builder.newLineIfNotEmpty();
        EObject _command_9 = c.getCommand();
        Commands _commands = ((While) _command_9).getCommands();
        CharSequence _compile_1 = this.compile(_commands);
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
        _builder.append("\t", "");
        _builder.append("od");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Expr expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ExprAnd _exprAnd = expr.getExprAnd();
      boolean _notEquals = (!Objects.equal(_exprAnd, null));
      if (_notEquals) {
        ExprAnd _exprAnd_1 = expr.getExprAnd();
        CharSequence _compile = this.compile(_exprAnd_1);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ExprSimple _exprsimple = expr.getExprsimple();
      boolean _notEquals_1 = (!Objects.equal(_exprsimple, null));
      if (_notEquals_1) {
        ExprSimple _exprsimple_1 = expr.getExprsimple();
        CharSequence _compile_1 = this.compile(_exprsimple_1);
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ExprAnd expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ExprAnd _exprAnd = expr.getExprAnd();
      boolean _equals = Objects.equal(_exprAnd, null);
      if (_equals) {
        ExprOr _exprOr = expr.getExprOr();
        CharSequence _compile = this.compile(_exprOr);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      } else {
        ExprOr _exprOr_1 = expr.getExprOr();
        CharSequence _compile_1 = this.compile(_exprOr_1);
        _builder.append(_compile_1, "");
        _builder.append(" && ");
        ExprAnd _exprAnd_1 = expr.getExprAnd();
        Object _compile_2 = this.compile(_exprAnd_1);
        _builder.append(_compile_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ExprOr expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ExprOr _exprOr = expr.getExprOr();
      boolean _equals = Objects.equal(_exprOr, null);
      if (_equals) {
        ExprNot _exprNot = expr.getExprNot();
        CharSequence _compile = this.compile(_exprNot);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      } else {
        ExprNot _exprNot_1 = expr.getExprNot();
        CharSequence _compile_1 = this.compile(_exprNot_1);
        _builder.append(_compile_1, "");
        _builder.append(" || ");
        ExprOr _exprOr_1 = expr.getExprOr();
        Object _compile_2 = this.compile(_exprOr_1);
        _builder.append(_compile_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ExprNot expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Not _not = expr.getNot();
      boolean _notEquals = (!Objects.equal(_not, null));
      if (_notEquals) {
        _builder.append("!");
        ExprEq _exprEq = expr.getExprEq();
        CharSequence _compile = this.compile(_exprEq);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("!");
        ExprEq _exprEq_1 = expr.getExprEq();
        CharSequence _compile_1 = this.compile(_exprEq_1);
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ExprEq expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expr _expr = expr.getExpr();
      boolean _notEquals = (!Objects.equal(_expr, null));
      if (_notEquals) {
        _builder.append("(");
        Expr _expr_1 = expr.getExpr();
        Object _compile = this.compile(_expr_1);
        _builder.append(_compile, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        ExprSimple _exprSimple1 = expr.getExprSimple1();
        CharSequence _compile_1 = this.compile(_exprSimple1);
        _builder.append(_compile_1, "");
        _builder.append(" =? ");
        ExprSimple _exprSimple2 = expr.getExprSimple2();
        CharSequence _compile_2 = this.compile(_exprSimple2);
        _builder.append(_compile_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ExprSimple expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Nil2 _nil = expr.getNil();
      boolean _notEquals = (!Objects.equal(_nil, null));
      if (_notEquals) {
        _builder.append("nil");
        _builder.newLine();
      }
    }
    {
      String _variable = expr.getVariable();
      boolean _notEquals_1 = (!Objects.equal(_variable, null));
      if (_notEquals_1) {
        String _variable_1 = expr.getVariable();
        _builder.append(_variable_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!Objects.equal(expr.getSymbol(), null)) && Objects.equal(expr.getLexpr(), null))) {
        String _symbol = expr.getSymbol();
        _builder.append(_symbol, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
