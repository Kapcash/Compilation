function isNotZero:
read X
%
	if X then
		B := (cons nil nil)
	else
		B := nil
	fi
%
write B

function isZero:
read X
%
	if X then
		B := nil
	else
		B := (cons nil nil)
	fi
%
write B

function isOne:
read X
%
	if (X =? (cons nil nil)) then
		B := (cons nil nil)
	else
		B := nil
	fi
%
write B

function incr:
read X
%
	X := (cons nil X)
%
write X

function decr:
read X
%
	X := (tl X)
%
write X

function add:
read X, Y
%
	S := X ;
	for Y do
		S := (incr S)
	od
%
write S

function addR:
read X, Y
%
	if (isZero Y) then
		S := X
	else
		S := (incr (addR X (decr Y)))
	fi
%
write S

function subs:
read X, Y
%
	D := X ;
	for Y do
		D := (decr D)
	od
%
write D

function mult:
read X, Y
%
	P := nil ;
	for Y do
		P := (add X P)
	od
%
write P

function pow:
read X, Y
%
	P := (cons nil nil) ;
	for Y do
		P := (mult X P)
	od
%
write P

function div:
read X, Y
%
	Q ,R := nil ,X ;
	NextR := (subs R Y) ;
	while (isNotZero NextR) do
		Q ,R := (incr Q) ,NextR
	od
%
write Q, R

function gcd:
read X, Y
%
	Q ,R := (div X Y) ;
	if (isNotZero R) then
		GCD := (gcd Y R)
	else
		GCD := Y
	fi
%
write GCD

function fact:
read X
%
	F := (cons nil nil) ;
	while (isNotZero X) do
		X ,F := (decr X) ,(mult F X)
	od
%
write F

function fib:
read X
%
	if ((isZero X) or (isOne X)) then
		F := (cons nil nil)
	else
		F := (add (fib (decr X)) (fib (decr (decr X))))
	fi
%
write F
