/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalCompilationParser;
import org.xtext.services.CompilationGrammarAccess;

public class CompilationParser extends AbstractContentAssistParser {

	@Inject
	private CompilationGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCompilationParser createParser() {
		InternalCompilationParser result = new InternalCompilationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getReadAccess().getGroup(), "rule__Read__Group__0");
					put(grammarAccess.getReadAccess().getGroup_2(), "rule__Read__Group_2__0");
					put(grammarAccess.getWriteAccess().getGroup(), "rule__Write__Group__0");
					put(grammarAccess.getWriteAccess().getGroup_2(), "rule__Write__Group_2__0");
					put(grammarAccess.getAffectationAccess().getGroup(), "rule__Affectation__Group__0");
					put(grammarAccess.getProgramAccess().getFunctionsAssignment(), "rule__Program__FunctionsAssignment");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getReadsAssignment_3(), "rule__Function__ReadsAssignment_3");
					put(grammarAccess.getFunctionAccess().getCommandsAssignment_5(), "rule__Function__CommandsAssignment_5");
					put(grammarAccess.getFunctionAccess().getWritesAssignment_7(), "rule__Function__WritesAssignment_7");
					put(grammarAccess.getReadAccess().getNameAssignment_1(), "rule__Read__NameAssignment_1");
					put(grammarAccess.getReadAccess().getNameAssignment_2_1(), "rule__Read__NameAssignment_2_1");
					put(grammarAccess.getWriteAccess().getNameAssignment_1(), "rule__Write__NameAssignment_1");
					put(grammarAccess.getWriteAccess().getNameAssignment_2_1(), "rule__Write__NameAssignment_2_1");
					put(grammarAccess.getNopAccess().getNameAssignment(), "rule__Nop__NameAssignment");
					put(grammarAccess.getAffectationAccess().getNameAssignment_0(), "rule__Affectation__NameAssignment_0");
					put(grammarAccess.getAffectationAccess().getValeurAssignment_2(), "rule__Affectation__ValeurAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalCompilationParser typedParser = (InternalCompilationParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CompilationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CompilationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
