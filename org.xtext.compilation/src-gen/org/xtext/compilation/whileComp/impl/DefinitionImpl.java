/**
 * generated by Xtext 2.10.0
 */
package org.xtext.compilation.whileComp.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.compilation.whileComp.Command;
import org.xtext.compilation.whileComp.Definition;
import org.xtext.compilation.whileComp.Read;
import org.xtext.compilation.whileComp.WhileCompPackage;
import org.xtext.compilation.whileComp.Write;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.compilation.whileComp.impl.DefinitionImpl#getReads <em>Reads</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.DefinitionImpl#getCommands <em>Commands</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.DefinitionImpl#getWrites <em>Writes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DefinitionImpl extends MinimalEObjectImpl.Container implements Definition
{
  /**
   * The cached value of the '{@link #getReads() <em>Reads</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReads()
   * @generated
   * @ordered
   */
  protected EList<Read> reads;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<Command> commands;

  /**
   * The cached value of the '{@link #getWrites() <em>Writes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWrites()
   * @generated
   * @ordered
   */
  protected EList<Write> writes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileCompPackage.Literals.DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Read> getReads()
  {
    if (reads == null)
    {
      reads = new EObjectContainmentEList<Read>(Read.class, this, WhileCompPackage.DEFINITION__READS);
    }
    return reads;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Command> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<Command>(Command.class, this, WhileCompPackage.DEFINITION__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Write> getWrites()
  {
    if (writes == null)
    {
      writes = new EObjectContainmentEList<Write>(Write.class, this, WhileCompPackage.DEFINITION__WRITES);
    }
    return writes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhileCompPackage.DEFINITION__READS:
        return ((InternalEList<?>)getReads()).basicRemove(otherEnd, msgs);
      case WhileCompPackage.DEFINITION__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
      case WhileCompPackage.DEFINITION__WRITES:
        return ((InternalEList<?>)getWrites()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileCompPackage.DEFINITION__READS:
        return getReads();
      case WhileCompPackage.DEFINITION__COMMANDS:
        return getCommands();
      case WhileCompPackage.DEFINITION__WRITES:
        return getWrites();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileCompPackage.DEFINITION__READS:
        getReads().clear();
        getReads().addAll((Collection<? extends Read>)newValue);
        return;
      case WhileCompPackage.DEFINITION__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends Command>)newValue);
        return;
      case WhileCompPackage.DEFINITION__WRITES:
        getWrites().clear();
        getWrites().addAll((Collection<? extends Write>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.DEFINITION__READS:
        getReads().clear();
        return;
      case WhileCompPackage.DEFINITION__COMMANDS:
        getCommands().clear();
        return;
      case WhileCompPackage.DEFINITION__WRITES:
        getWrites().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.DEFINITION__READS:
        return reads != null && !reads.isEmpty();
      case WhileCompPackage.DEFINITION__COMMANDS:
        return commands != null && !commands.isEmpty();
      case WhileCompPackage.DEFINITION__WRITES:
        return writes != null && !writes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DefinitionImpl
