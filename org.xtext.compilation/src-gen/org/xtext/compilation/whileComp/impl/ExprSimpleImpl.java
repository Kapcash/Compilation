/**
 * generated by Xtext 2.10.0
 */
package org.xtext.compilation.whileComp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.compilation.whileComp.Cons;
import org.xtext.compilation.whileComp.Expr;
import org.xtext.compilation.whileComp.ExprSimple;
import org.xtext.compilation.whileComp.Hd;
import org.xtext.compilation.whileComp.Lexpr;
import org.xtext.compilation.whileComp.List;
import org.xtext.compilation.whileComp.Tl;
import org.xtext.compilation.whileComp.WhileCompPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Simple</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getNil <em>Nil</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getSymbol <em>Symbol</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getCons <em>Cons</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getLexpr <em>Lexpr</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getList <em>List</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getHd <em>Hd</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link org.xtext.compilation.whileComp.impl.ExprSimpleImpl#getTl <em>Tl</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprSimpleImpl extends MinimalEObjectImpl.Container implements ExprSimple
{
  /**
   * The default value of the '{@link #getNil() <em>Nil</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected static final String NIL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNil() <em>Nil</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNil()
   * @generated
   * @ordered
   */
  protected String nil = NIL_EDEFAULT;

  /**
   * The default value of the '{@link #getVariable() <em>Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected static final String VARIABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected String variable = VARIABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getSymbol() <em>Symbol</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSymbol()
   * @generated
   * @ordered
   */
  protected static final String SYMBOL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSymbol() <em>Symbol</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSymbol()
   * @generated
   * @ordered
   */
  protected String symbol = SYMBOL_EDEFAULT;

  /**
   * The cached value of the '{@link #getCons() <em>Cons</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCons()
   * @generated
   * @ordered
   */
  protected Cons cons;

  /**
   * The cached value of the '{@link #getLexpr() <em>Lexpr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLexpr()
   * @generated
   * @ordered
   */
  protected Lexpr lexpr;

  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected List list;

  /**
   * The cached value of the '{@link #getHd() <em>Hd</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHd()
   * @generated
   * @ordered
   */
  protected Hd hd;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected Expr expr;

  /**
   * The cached value of the '{@link #getTl() <em>Tl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTl()
   * @generated
   * @ordered
   */
  protected Tl tl;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprSimpleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileCompPackage.Literals.EXPR_SIMPLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNil()
  {
    return nil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNil(String newNil)
  {
    String oldNil = nil;
    nil = newNil;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__NIL, oldNil, nil));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariable(String newVariable)
  {
    String oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSymbol()
  {
    return symbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSymbol(String newSymbol)
  {
    String oldSymbol = symbol;
    symbol = newSymbol;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__SYMBOL, oldSymbol, symbol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cons getCons()
  {
    return cons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCons(Cons newCons, NotificationChain msgs)
  {
    Cons oldCons = cons;
    cons = newCons;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__CONS, oldCons, newCons);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCons(Cons newCons)
  {
    if (newCons != cons)
    {
      NotificationChain msgs = null;
      if (cons != null)
        msgs = ((InternalEObject)cons).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__CONS, null, msgs);
      if (newCons != null)
        msgs = ((InternalEObject)newCons).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__CONS, null, msgs);
      msgs = basicSetCons(newCons, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__CONS, newCons, newCons));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lexpr getLexpr()
  {
    return lexpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLexpr(Lexpr newLexpr, NotificationChain msgs)
  {
    Lexpr oldLexpr = lexpr;
    lexpr = newLexpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__LEXPR, oldLexpr, newLexpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLexpr(Lexpr newLexpr)
  {
    if (newLexpr != lexpr)
    {
      NotificationChain msgs = null;
      if (lexpr != null)
        msgs = ((InternalEObject)lexpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__LEXPR, null, msgs);
      if (newLexpr != null)
        msgs = ((InternalEObject)newLexpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__LEXPR, null, msgs);
      msgs = basicSetLexpr(newLexpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__LEXPR, newLexpr, newLexpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List getList()
  {
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetList(List newList, NotificationChain msgs)
  {
    List oldList = list;
    list = newList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__LIST, oldList, newList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setList(List newList)
  {
    if (newList != list)
    {
      NotificationChain msgs = null;
      if (list != null)
        msgs = ((InternalEObject)list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__LIST, null, msgs);
      if (newList != null)
        msgs = ((InternalEObject)newList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__LIST, null, msgs);
      msgs = basicSetList(newList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__LIST, newList, newList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Hd getHd()
  {
    return hd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHd(Hd newHd, NotificationChain msgs)
  {
    Hd oldHd = hd;
    hd = newHd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__HD, oldHd, newHd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHd(Hd newHd)
  {
    if (newHd != hd)
    {
      NotificationChain msgs = null;
      if (hd != null)
        msgs = ((InternalEObject)hd).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__HD, null, msgs);
      if (newHd != null)
        msgs = ((InternalEObject)newHd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__HD, null, msgs);
      msgs = basicSetHd(newHd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__HD, newHd, newHd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(Expr newExpr, NotificationChain msgs)
  {
    Expr oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(Expr newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tl getTl()
  {
    return tl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTl(Tl newTl, NotificationChain msgs)
  {
    Tl oldTl = tl;
    tl = newTl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__TL, oldTl, newTl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTl(Tl newTl)
  {
    if (newTl != tl)
    {
      NotificationChain msgs = null;
      if (tl != null)
        msgs = ((InternalEObject)tl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__TL, null, msgs);
      if (newTl != null)
        msgs = ((InternalEObject)newTl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileCompPackage.EXPR_SIMPLE__TL, null, msgs);
      msgs = basicSetTl(newTl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileCompPackage.EXPR_SIMPLE__TL, newTl, newTl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__CONS:
        return basicSetCons(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        return basicSetLexpr(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__LIST:
        return basicSetList(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__HD:
        return basicSetHd(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        return basicSetExpr(null, msgs);
      case WhileCompPackage.EXPR_SIMPLE__TL:
        return basicSetTl(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__NIL:
        return getNil();
      case WhileCompPackage.EXPR_SIMPLE__VARIABLE:
        return getVariable();
      case WhileCompPackage.EXPR_SIMPLE__SYMBOL:
        return getSymbol();
      case WhileCompPackage.EXPR_SIMPLE__CONS:
        return getCons();
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        return getLexpr();
      case WhileCompPackage.EXPR_SIMPLE__LIST:
        return getList();
      case WhileCompPackage.EXPR_SIMPLE__HD:
        return getHd();
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        return getExpr();
      case WhileCompPackage.EXPR_SIMPLE__TL:
        return getTl();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__NIL:
        setNil((String)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__VARIABLE:
        setVariable((String)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__SYMBOL:
        setSymbol((String)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__CONS:
        setCons((Cons)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        setLexpr((Lexpr)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__LIST:
        setList((List)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__HD:
        setHd((Hd)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        setExpr((Expr)newValue);
        return;
      case WhileCompPackage.EXPR_SIMPLE__TL:
        setTl((Tl)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__NIL:
        setNil(NIL_EDEFAULT);
        return;
      case WhileCompPackage.EXPR_SIMPLE__VARIABLE:
        setVariable(VARIABLE_EDEFAULT);
        return;
      case WhileCompPackage.EXPR_SIMPLE__SYMBOL:
        setSymbol(SYMBOL_EDEFAULT);
        return;
      case WhileCompPackage.EXPR_SIMPLE__CONS:
        setCons((Cons)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        setLexpr((Lexpr)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__LIST:
        setList((List)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__HD:
        setHd((Hd)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        setExpr((Expr)null);
        return;
      case WhileCompPackage.EXPR_SIMPLE__TL:
        setTl((Tl)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileCompPackage.EXPR_SIMPLE__NIL:
        return NIL_EDEFAULT == null ? nil != null : !NIL_EDEFAULT.equals(nil);
      case WhileCompPackage.EXPR_SIMPLE__VARIABLE:
        return VARIABLE_EDEFAULT == null ? variable != null : !VARIABLE_EDEFAULT.equals(variable);
      case WhileCompPackage.EXPR_SIMPLE__SYMBOL:
        return SYMBOL_EDEFAULT == null ? symbol != null : !SYMBOL_EDEFAULT.equals(symbol);
      case WhileCompPackage.EXPR_SIMPLE__CONS:
        return cons != null;
      case WhileCompPackage.EXPR_SIMPLE__LEXPR:
        return lexpr != null;
      case WhileCompPackage.EXPR_SIMPLE__LIST:
        return list != null;
      case WhileCompPackage.EXPR_SIMPLE__HD:
        return hd != null;
      case WhileCompPackage.EXPR_SIMPLE__EXPR:
        return expr != null;
      case WhileCompPackage.EXPR_SIMPLE__TL:
        return tl != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (nil: ");
    result.append(nil);
    result.append(", variable: ");
    result.append(variable);
    result.append(", symbol: ");
    result.append(symbol);
    result.append(')');
    return result.toString();
  }

} //ExprSimpleImpl
