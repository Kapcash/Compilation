/*
 * generated by Xtext 2.10.0
 */
package org.xtext.compilation.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.compilation.whileComp.Affectation
import org.xtext.compilation.whileComp.Command
import org.xtext.compilation.whileComp.Function
import org.xtext.compilation.whileComp.Nil2
import org.xtext.compilation.whileComp.Nop
import org.xtext.compilation.whileComp.Program

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WhileCompGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(typeof(Function))){
			fsa.generateFile(e.function + "output.whpp",	e.compile)
		}
	}
	
	def compile (Program p){
		for (f : p.functions){
			f.compile
		}
	}
	
	def compile (Function c){'''
		function «c.function» :
		«FOR f : c.definition.reads»
		read«FOR param: f.variable SEPARATOR ','» «param»«ENDFOR»
		«ENDFOR»
		%
		«FOR f : c.definition.commands»
			«(f.command as Command).compile»
		«ENDFOR»
		%
		«FOR f : c.definition.writes»
		write«FOR param: f.variable SEPARATOR ','» «param»«ENDFOR»
		«ENDFOR»
	'''	
	}
	
	def compile(Command c){
		'''
		«IF c instanceof Affectation»
			«IF (c as Affectation).nil instanceof Nil2»
				«"	"»«(c as Affectation).affectation» :=«(c as Affectation).nil.nil»
			«ELSE»
				«"	"»«(c as Affectation).affectation» :=«(c as Affectation).valeur»
			«ENDIF»
		«ENDIF»
		«IF c instanceof Nop»
			«"	"»nop
		«ENDIF»
		'''
	}
}
