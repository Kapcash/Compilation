package sprint2;
/*
 * generated by Xtext 2.10.0
 */

import java.util.HashMap;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.compilation.WhileCompStandaloneSetup;
import org.xtext.compilation.whileComp.Command;
import org.xtext.compilation.whileComp.Definition;
import org.xtext.compilation.whileComp.Function;
import org.xtext.compilation.whileComp.Program;
import org.xtext.compilation.whileComp.Read;
import org.xtext.compilation.whileComp.Write;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class GeneratorAddr {

	public static void main(String[] args) {
		Injector injector = new WhileCompStandaloneSetup().createInjectorAndDoEMFRegistration();
		GeneratorAddr main = injector.getInstance(GeneratorAddr.class);
		try{
			main.runGenerator("../exemple.wh","./");
		} catch(Exception e){
			System.out.println(e.getMessage());
		}
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	HashMap<String,DefFun> map;
	
	protected void runGenerator(String string,String sortie) throws Exception{
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(string), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		// Configure and start the generator
		fileAccess.setOutputPath(sortie);
		
		TreeIterator<EObject> tree = resource.getAllContents();
		while(tree.hasNext()){
			EObject next = tree.next();
			if(next instanceof Program)
				iterateAST((Program)next); //Parcours l'AST du 'Program'
		}
		
		System.out.println("Code generation finished.");
	}
	
	private void iterateAST(Program prog)throws Exception{
		map = new HashMap<String,DefFun>();
		for (Function f : prog.getFunctions()){
			iterateAST(f);
			/*
			 * System.out.println(fun+":");
			Definition def = f.getDefinition();
			*/
		}
		System.out.println(map);
	}
	
	public void iterateAST(Function f) throws Exception{
		String fName = f.getFunction();
		boolean fun = map.keySet().contains(f);
		if(fun){ //Function already existing
			throw new Exception("Function "+fName+" already declared !");
		}else{
			DefFun function = new DefFun();
			map.put(fName, function); //Adding a new blank function
			iterateAST(f.getDefinition(),function);
		}
	}
	
	public void iterateAST(Definition def, DefFun f){
		//Inputs
		Read reads = def.getRead();
		EList<String> varsR = reads.getVariable();
		f.setIn(varsR.size());
		for(String v : varsR){
			f.addVar(v,null);
		}
		//Commands
		EList<Command> comms = def.getCommands();
		for(Command c : comms){
			
		}
		
		//Outputs
		Write writes = def.getWrite();
		EList<String> varsW = writes.getVariable();
		f.setIn(varsW.size());
		for(String v : varsW){
			f.addVar(v,null);
		}
	}
	
}
