/**
 * generated by Xtext 2.10.0
 */
package org.xtext.compilation.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.compilation.whileComp.Affectation;
import org.xtext.compilation.whileComp.Command;
import org.xtext.compilation.whileComp.Function;
import org.xtext.compilation.whileComp.Nop;
import org.xtext.compilation.whileComp.Read;
import org.xtext.compilation.whileComp.Write;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhileCompGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Function> _filter = Iterables.<Function>filter(_iterable, Function.class);
    for (final Function e : _filter) {
      String _name = e.getName();
      String _plus = (_name + ".whpp");
      CharSequence _compile = this.compile(e);
      fsa.generateFile(_plus, _compile);
    }
  }
  
  public CharSequence compile(final Function c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = c.getName();
    _builder.append(_name, "");
    _builder.append(" :");
    _builder.newLineIfNotEmpty();
    {
      EList<Read> _reads = c.getReads();
      for(final Read f : _reads) {
        _builder.append("read");
        {
          EList<String> _name_1 = f.getName();
          boolean _hasElements = false;
          for(final String param : _name_1) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            _builder.append(" ");
            _builder.append(param, "");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("%");
    _builder.newLine();
    {
      EList<Command> _commands = c.getCommands();
      for(final Command f_1 : _commands) {
        {
          if ((f_1 instanceof Affectation)) {
            _builder.append("\t", "");
            String _name_2 = ((Affectation)f_1).getName();
            _builder.append(_name_2, "");
            _builder.append(" :=");
            int _valeur = ((Affectation)f_1).getValeur();
            _builder.append(_valeur, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((f_1 instanceof Nop)) {
            _builder.append("\t", "");
            _builder.append("nop");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("%");
    _builder.newLine();
    {
      EList<Write> _writes = c.getWrites();
      for(final Write f_2 : _writes) {
        _builder.append("write");
        {
          EList<String> _name_3 = f_2.getName();
          boolean _hasElements_1 = false;
          for(final String param_1 : _name_3) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            _builder.append(" ");
            _builder.append(param_1, "");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
