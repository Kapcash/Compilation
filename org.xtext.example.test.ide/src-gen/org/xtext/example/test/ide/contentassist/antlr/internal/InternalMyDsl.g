/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.test.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.test.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.test.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getClassesAssignment()); }
		(rule__Model__ClassesAssignment)*
		{ after(grammarAccess.getModelAccess().getClassesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClasse
entryRuleClasse
:
{ before(grammarAccess.getClasseRule()); }
	 ruleClasse
{ after(grammarAccess.getClasseRule()); } 
	 EOF 
;

// Rule Classe
ruleClasse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClasseAccess().getGroup()); }
		(rule__Classe__Group__0)
		{ after(grammarAccess.getClasseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribut
entryRuleAttribut
:
{ before(grammarAccess.getAttributRule()); }
	 ruleAttribut
{ after(grammarAccess.getAttributRule()); } 
	 EOF 
;

// Rule Attribut
ruleAttribut 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributAccess().getGroup()); }
		(rule__Attribut__Group__0)
		{ after(grammarAccess.getAttributAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__TypeAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributAccess().getTypeIntKeyword_0_0_0()); }
		'int'
		{ after(grammarAccess.getAttributAccess().getTypeIntKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributAccess().getTypeFloatKeyword_0_0_1()); }
		'float'
		{ after(grammarAccess.getAttributAccess().getTypeFloatKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAttributAccess().getTypeBooleanKeyword_0_0_2()); }
		'boolean'
		{ after(grammarAccess.getAttributAccess().getTypeBooleanKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getAttributAccess().getTypeCharKeyword_0_0_3()); }
		'char'
		{ after(grammarAccess.getAttributAccess().getTypeCharKeyword_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getAttributAccess().getTypeStringKeyword_0_0_4()); }
		'String'
		{ after(grammarAccess.getAttributAccess().getTypeStringKeyword_0_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classe__Group__0__Impl
	rule__Classe__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClasseAccess().getClassKeyword_0()); }
	'Class'
	{ after(grammarAccess.getClasseAccess().getClassKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classe__Group__1__Impl
	rule__Classe__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClasseAccess().getNameAssignment_1()); }
	(rule__Classe__NameAssignment_1)
	{ after(grammarAccess.getClasseAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classe__Group__2__Impl
	rule__Classe__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClasseAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getClasseAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classe__Group__3__Impl
	rule__Classe__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClasseAccess().getAttributsAssignment_3()); }
	(rule__Classe__AttributsAssignment_3)*
	{ after(grammarAccess.getClasseAccess().getAttributsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classe__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClasseAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getClasseAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribut__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribut__Group__0__Impl
	rule__Attribut__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributAccess().getTypeAssignment_0()); }
	(rule__Attribut__TypeAssignment_0)
	{ after(grammarAccess.getAttributAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribut__Group__1__Impl
	rule__Attribut__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributAccess().getNameAssignment_1()); }
	(rule__Attribut__NameAssignment_1)
	{ after(grammarAccess.getAttributAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribut__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getAttributAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ClassesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getClassesClasseParserRuleCall_0()); }
		ruleClasse
		{ after(grammarAccess.getModelAccess().getClassesClasseParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClasseAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getClasseAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classe__AttributsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClasseAccess().getAttributsAttributParserRuleCall_3_0()); }
		ruleAttribut
		{ after(grammarAccess.getClasseAccess().getAttributsAttributParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributAccess().getTypeAlternatives_0_0()); }
		(rule__Attribut__TypeAlternatives_0_0)
		{ after(grammarAccess.getAttributAccess().getTypeAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
