/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.test.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.test.myDsl.Command;
import org.xtext.example.test.myDsl.Function;
import org.xtext.example.test.myDsl.Model;
import org.xtext.example.test.myDsl.Read;
import org.xtext.example.test.myDsl.Write;
import org.xtext.example.test.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Function> _functions = model.getFunctions();
    for (final Function functions : _functions) {
      document.<Function>format(functions);
    }
  }
  
  protected void _format(final Function function, @Extension final IFormattableDocument document) {
    EList<Read> _reads = function.getReads();
    for (final Read reads : _reads) {
      document.<Read>format(reads);
    }
    EList<Command> _commands = function.getCommands();
    for (final Command commands : _commands) {
      document.<Command>format(commands);
    }
    EList<Write> _writes = function.getWrites();
    for (final Write writes : _writes) {
      document.<Write>format(writes);
    }
  }
  
  public void format(final Object function, final IFormattableDocument document) {
    if (function instanceof XtextResource) {
      _format((XtextResource)function, document);
      return;
    } else if (function instanceof Function) {
      _format((Function)function, document);
      return;
    } else if (function instanceof Model) {
      _format((Model)function, document);
      return;
    } else if (function instanceof EObject) {
      _format((EObject)function, document);
      return;
    } else if (function == null) {
      _format((Void)null, document);
      return;
    } else if (function != null) {
      _format(function, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(function, document).toString());
    }
  }
}
